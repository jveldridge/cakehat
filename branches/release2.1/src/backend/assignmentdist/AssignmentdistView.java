/*
 * AssignmentDistributorGUI.java
 *
 * Created on Sep 7, 2009, 12:53:58 PM
 */
package backend.assignmentdist;

import config.Assignment;
import config.HandinPart;
import config.TA;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utils.Allocator;
import utils.ErrorView;

/**
 *
 * @author aunger
 */
public class AssignmentdistView extends javax.swing.JFrame {

    private Assignment _asgn;

    /** Creates new form AssignmentDistributorGUI */
    public AssignmentdistView(Assignment asgn) {
        _asgn = asgn;

        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        try {
            this.setIconImage(ImageIO.read(getClass().getResource("/gradesystem/resources/icons/32x32/accessories-text-editor.png")));
        } catch (Exception e) {
        }

        boolean resolved = Allocator.getGradingUtilities().resolveMissingStudents(_asgn);

        if (resolved) {
            this.setVisible(true);
        }
        else {
            this.dispose();
            return;
        }

        this.setTitle(_asgn.getName() + " - cs015 Assignment Distributor");

        fillTable();
        this.setLocationRelativeTo(null);
    }

    private void fillTable() {

        try {
            mainTable.removeAll();
            mainTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{}, new String[]{}));
            mainTable.removeAll();
            DefaultTableModel m = (DefaultTableModel) mainTable.getModel();
            m.addColumn("TA Login");
            m.addColumn("Difference from Average");
            for (TA grader : Allocator.getCourseInfo().getDefaultGraders()) {
                m.addRow(new String[] {grader.getLogin(), "0"});
            }

        } catch (Exception e) {
            new ErrorView(e);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        generateDistButton = new javax.swing.JButton();
        explanationText = new javax.swing.JLabel();
        allocationScrollPanel = new javax.swing.JScrollPane();
        mainTable = new backend.assignmentdist.AssignmentdistTable();
        setupGradingButton = new javax.swing.JButton();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        closeMenuItem = new javax.swing.JMenuItem();

        generateDistButton.setText("1. Distribute Students");
        generateDistButton.setFocusable(false);
        generateDistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateDistButtonActionPerformed(evt);
            }
        });

        explanationText.setText("<html>Enter the number of handins above or below the average each TA should grade. (-2 = two less to grade)<br>(don't use a + symbol for positive numbers)</html>");

        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        allocationScrollPanel.setViewportView(mainTable);

        setupGradingButton.setText("2. Set Up Grading");
        setupGradingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupGradingButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        closeMenuItem.setText("Close");
        closeMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                closeMenuItemMouseReleased(evt);
            }
        });
        fileMenu.add(closeMenuItem);

        mainMenuBar.add(fileMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(explanationText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(generateDistButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setupGradingButton))
                    .addComponent(allocationScrollPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(explanationText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(allocationScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateDistButton)
                    .addComponent(setupGradingButton))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateDistButtonActionPerformed(java.awt.event.ActionEvent evt) {
        /** setup valiables **/

        //check to make sure that there is not a dist already
        if (!Allocator.getDatabaseIO().isDistEmpty(_asgn.getHandinPart())) {
            int n = JOptionPane.showConfirmDialog(new JFrame(), "A distribution already exists for " + _asgn.getName() + ".\nAre you sure you want to overwrite the existing distribution?", "Confirm Overwrite", JOptionPane.YES_NO_OPTION);
            if (n == JOptionPane.NO_OPTION) {
                return;
            }
        }

        //get handin logins, shuffle logins, add to deque
        ArrayList<String> handinLoginsRaw = new ArrayList<String>(_asgn.getHandinPart().getHandinLogins());
        Collections.shuffle(handinLoginsRaw);
        ArrayDeque<String> handinLogins = new ArrayDeque<String>(handinLoginsRaw);

        //get all grader logins
        ArrayList<String> taLogins = new ArrayList<String>();
        for (TA ta : Allocator.getCourseInfo().getDefaultGraders()) {
            taLogins.add(ta.getLogin());
        }

        //build distribution hashmap
        Map<String, Collection<String>> distribution = new HashMap<String, Collection<String>>();
        for (String grader : taLogins) {
            distribution.put(grader, new ArrayList<String>());
        }

        /** make distribution **/

        //determine how many students to give to each TA
        Map<String, Integer> numStudsNeeded = this.calculateNumberOfHandinsPerTA(handinLogins, taLogins.size());

        //distribute all the blacklisted handins to TAs first
        boolean distBlackListSuccessful = this.assignBlackListedHandinsToTAs(distribution, numStudsNeeded, handinLogins, _asgn.getHandinPart(), taLogins);
        if (!distBlackListSuccessful) {
            JOptionPane.showMessageDialog(this, "There was an error "
                        + "distributing blacklisted "
                        + "students. Please try running "
                        + "the distribution again.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //distribute the rest if the handins to TAs
        this.assignRemainingHandinsToTAs(distribution, numStudsNeeded, handinLogins, taLogins);

        //but the distribution into the DB
        Allocator.getDatabaseIO().setAsgnDist(_asgn.getHandinPart(), distribution);
    }

    /**
     * calculate how many handins each TA should get based on the modifiers entered
     *
     * @param handinLogins
     * @param numberOfTAs
     * @return - map between TA and number to grade
     */
    private Map<String, Integer> calculateNumberOfHandinsPerTA(Collection<String> handinLogins, int numberOfTAs) {
        //get the current distribution modifiers from table
        DefaultTableModel modelOfTable = (DefaultTableModel) mainTable.getModel();

        //total number of handins used in calculating the average
        int calculatedTotalStudents = handinLogins.size();

        //update total number of students based modifiers from table (only used for calc of avg)
        for (int rowCount = 0; rowCount < modelOfTable.getRowCount(); rowCount++) {
            int diffFromAvg = (Integer) Integer.parseInt(modelOfTable.getValueAt(rowCount, 1).toString());
            //the extra (if TA gets less than average) students need to be go to the other TAs therefore the average and thus the total must be higher
            calculatedTotalStudents -= diffFromAvg;
        }

        //average number of students for each ta
        int avg = (int) Math.floor((double) calculatedTotalStudents / (double) numberOfTAs);

        //build hashmap of how many students each TA must grade
        HashMap<String, Integer> numStudsNeeded = new HashMap<String, Integer>();
        for (int rowCount = 0; rowCount < modelOfTable.getRowCount(); rowCount++) {
            String taLogin = (String) modelOfTable.getValueAt(rowCount, 0);
            int numToGrade = Integer.parseInt(modelOfTable.getValueAt(rowCount, 1).toString()) + avg;

            numStudsNeeded.put(taLogin, numToGrade);
        }

        return numStudsNeeded;
    }

    /**
     * assign all the blacklisted handins to TAs first so there the most possible TAs to give them to
     *
     * @param distribution
     * @param numStudsNeeded
     * @param handinLogins
     * @return - did this step work?
     */
    private boolean assignBlackListedHandinsToTAs(Map<String, Collection<String>> distribution,
                        Map<String, Integer> numStudsNeeded, Collection<String> handinLogins,
                        HandinPart handinPart, ArrayList<String> taLogins) {
        
        //get all the groups for this project (maps student login to students in their group)
        Map<String, Collection<String>> groups = Allocator.getDatabaseIO().getGroups(handinPart);

        //make a list of all blacklisted students and hashmap of all ta blacklists
        Set<String> blacklistedStudents = new HashSet<String>();
        Map<String, Collection<String>> taBlacklists = new HashMap<String, Collection<String>>();

        for (String taLogin : taLogins) {
            Collection<String> tasBlackList = Allocator.getDatabaseIO().getTABlacklist(taLogin);
            blacklistedStudents.addAll(tasBlackList);
            taBlacklists.put(taLogin, tasBlackList);
        }

        //get all handins to pick which are the blacklisted handins
        Collection<String> blacklistedHandins = handinPart.getHandinLogins();

        //remove handins which aren't blacklisted
        Iterator<String> iterator = blacklistedHandins.iterator();
        while (iterator.hasNext()) {
            if (!Allocator.getGeneralUtilities().containsAny(blacklistedStudents, groups.get(iterator.next()))) {
                iterator.remove();
            }
        }

        //add all blacklisted handins to a TA first
        for (String blStudent : blacklistedHandins) {
            Collections.shuffle(taLogins);
            boolean distributed = false;
            for (String taLogin : taLogins) {
                //if ta's blacklist does not contain students from the handin group (individuals will have a group of size 1) and ta's dist is not full
                if (!Allocator.getGeneralUtilities().containsAny(taBlacklists.get(taLogin), groups.get(blStudent))
                        && numStudsNeeded.get(taLogin) > 0) {

                    distribution.get(taLogin).add(blStudent); //add student to ta's dist
                    numStudsNeeded.put(taLogin, numStudsNeeded.get(taLogin) - 1); //reduce num ta needs
                    distributed = true;
                    break;
                }
            }
            if (!distributed) {
                return false;
            }
        }

        //remove all blacklisted students from student list since they are all distributed already
        handinLogins.removeAll(blacklistedHandins);
        return true;
    }

    /**
     * take the handins which are not on any blacklist and distributes them to TAs at random until the TA is at their limit
     *
     * @param distribution - current distribution
     * @param numStudsNeeded
     * @param handinLogins
     * @return - did this step work?
     */
    private boolean assignRemainingHandinsToTAs(Map<String, Collection<String>> distribution,
                        Map<String, Integer> numStudsNeeded, ArrayDeque<String> handinLogins,
                        ArrayList<String> taLogins) {
        
        Collections.shuffle(taLogins);
        //fill TAs to limit
        for (String taLogin : taLogins) {
            for (int i = 0; i < numStudsNeeded.get(taLogin); i++) {
                distribution.get(taLogin).add(handinLogins.removeFirst());
            }
        }

        //distribute remaining students (< # TAs of them) to random TAs
        //There will be < # TAs of them because we floored when we took the average so only at most n-1 could be left.
        Collections.shuffle(taLogins);
        for (String taLogin : taLogins) {
            if (!handinLogins.isEmpty()) {
                distribution.get(taLogin).add(handinLogins.removeFirst());
            } else {
                break;
            }
        }
        return true;
    }

    private void setupGradingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupGradingButtonActionPerformed

        //create rubric directory if it does not exist
        String directoryPath = Allocator.getCourseInfo().getRubricDir() + _asgn.getName() + "/";
        Allocator.getGeneralUtilities().makeDirectory(directoryPath);

        ImageIcon icon = new javax.swing.ImageIcon("/gradesystem/resources/icons/32x32/accessories-text-editor.png"); // NOI18N
        String input = (String) JOptionPane.showInputDialog(new JFrame(), "Enter minutes of leniency:", "Set Grace Period", JOptionPane.PLAIN_MESSAGE, icon, null, "");
        int minsLeniency = Allocator.getCourseInfo().getMinutesOfLeniency();
        if ((input != null) && (input.length() != 0)) {
            minsLeniency = Integer.parseInt(input);
        }

        Map<String, Collection<String>> distribution = Allocator.getDatabaseIO().getDistribution(_asgn.getHandinPart());
        Allocator.getRubricManager().distributeRubrics(_asgn.getHandinPart(), distribution, minsLeniency);
}//GEN-LAST:event_setupGradingButtonActionPerformed

    private void closeMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMenuItemMouseReleased
        this.dispose();
    }//GEN-LAST:event_closeMenuItemMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane allocationScrollPanel;
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JLabel explanationText;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton generateDistButton;
    private javax.swing.JMenuBar mainMenuBar;
    private backend.assignmentdist.AssignmentdistTable mainTable;
    private javax.swing.JButton setupGradingButton;
    // End of variables declaration//GEN-END:variables
}
