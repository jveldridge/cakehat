package cakehat.services;

import org.joda.time.DateTime;
import cakehat.database.assignment.Part;
import cakehat.Allocator;
import cakehat.Allocator.SingletonAllocation;
import cakehat.database.assignment.Assignment;
import cakehat.database.assignment.GradableEvent;
import cakehat.database.Group;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import org.junit.Before;
import org.junit.Test;
import support.utils.UserUtilities;

import static org.junit.Assert.*;
import static org.easymock.EasyMock.*;

/**
 * Tests the paths generated by {@link PathServicesImpl}.
 *
 * @author jak2
 */
public class PathServicesTest
{
    private static final String COURSE = "cs001";
    private static final int YEAR = new DateTime().getYear();

    private static final int ASSIGNMENT_ID = 13;
    private static final int GRADABLE_EVENT_ID = 27;
    private static final int PART_ID = 39;
    private static final int TA_ID = 501;
    private static final int GROUP_ID = 42;

    private Group _group;
    private Assignment _assignment;
    private GradableEvent _gradableEvent;
    private Part _part;
    private PathServices _service;

    @Before
    public void setup() throws ServicesException, IOException, SQLException
    {
        //Mock group
        _group = createMock(Group.class);
        expect(_group.getId()).andReturn(GROUP_ID).anyTimes();
        replay(_group);

        //Create mocked assignment, gradable event, and part objects
        _assignment = createMock(Assignment.class);
        expect(_assignment.getId()).andReturn(ASSIGNMENT_ID).anyTimes();
        
        _gradableEvent = createMock(GradableEvent.class);
        expect(_gradableEvent.getId()).andReturn(GRADABLE_EVENT_ID).anyTimes();
        expect(_gradableEvent.getAssignment()).andReturn(_assignment).anyTimes();
        
        _part = createMock(Part.class);
        expect(_part.getId()).andReturn(PART_ID).anyTimes();
        expect(_part.getGradableEvent()).andReturn(_gradableEvent).anyTimes();
        expect(_part.getAssignment()).andReturn(_assignment).anyTimes();

        replay(_assignment);
        replay(_gradableEvent);
        replay(_part);
        
        //Mock out course information
        final CourseInfo courseInfo = createMock(CourseInfo.class);
        expect(courseInfo.getCourse()).andReturn(COURSE).anyTimes();
        replay(courseInfo);
        SingletonAllocation<CourseInfo> courseInfoAlloc =
            new SingletonAllocation<CourseInfo>()
            {
                public CourseInfo allocate() { return courseInfo; };
            };

        //Mock out user utilities
        final UserUtilities userUtil = createMock(UserUtilities.class);
        expect(userUtil.getUserId()).andReturn(TA_ID).anyTimes();
        replay(userUtil);
        SingletonAllocation<UserUtilities> userUtilAlloc =
            new SingletonAllocation<UserUtilities>()
            {
                public UserUtilities allocate() { return userUtil; };
            };
        
        new Allocator.Customizer()
                .setCourseInfo(courseInfoAlloc)
                .setUserUtils(userUtilAlloc)
                .customize();

        _service = Allocator.getPathServices();
    }
    
    @Test
    public void testGroupGMLFile()
    {
        File expected = new File("/course/" + COURSE + "/.cakehat/" + YEAR + "/gml/" + ASSIGNMENT_ID + "/" +
                GRADABLE_EVENT_ID + "/" + PART_ID + "/" + GROUP_ID + ".gml");

        assertEquals(expected, _service.getGroupGMLFile(_part, _group));
    }

    @Test
    public void testGetDatabaseFile()
    {
        File expected = new File("/course/" + COURSE + "/.cakehat/" + YEAR + "/database/database.db");

        assertEquals(expected, _service.getDatabaseFile());
    }

    @Test
    public void testGetDatabaseBackupDir()
    {
        File expected = new File("/course/" + COURSE + "/.cakehat/" + YEAR + "/database/backups");

        assertEquals(expected, _service.getDatabaseBackupDir());
    }

    @Test
    public void testGetUserWorkspaceDir()
    {
        File expected = new File("/course/" + COURSE + "/.cakehat/workspaces/" + TA_ID + "-test");

        assertEquals(expected, _service.getUserWorkspaceDir());
    }

    @Test
    public void testGetUnarchiveHandinDir()
    {
        File expected = new File("/course/" + COURSE + "/.cakehat/workspaces/" +  TA_ID + "-test/" + ASSIGNMENT_ID +
                "/" + GRADABLE_EVENT_ID + "/" + PART_ID + "/" + GROUP_ID);

        assertEquals(expected, _service.getUnarchiveHandinDir(_part, _group));
    }
}