/*
 * GradeReportView.java
 *
 * Created on Nov 7, 2009, 11:22:20 PM
 */
package backend.gradereport;

import backend.stathist.AssignmentChartPanel;
import backend.stathist.StudentChartPanel;
import config.Assignment;
import config.Part;
import java.io.File;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Map;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.text.html.HTMLEditorKit;
import utils.Allocator;
import utils.ErrorView;

/**
 *
 * @author psastras
 * @author jeldridg
 */
public class GradeReportView extends javax.swing.JFrame {

    /** Creates new form GradeReportView */
    private Collection<String> _students;
    private Map<Assignment,Collection<Part>> _asgnParts;
    
    public GradeReportView(Map<Assignment,Collection<Part>> asgnParts, Collection<String> students) {
        initComponents();
        _asgnParts = asgnParts;
        _students = students;
        HTMLEditorKit k = new HTMLEditorKit();

        _previewPane.setEditorKit(k);
        _previewPane.setDocument(k.createDefaultDocument());

        _messageText.setText("<p>Here are your current grades for the course.<br />\n<i>Histograms for each of the projects are attached.</i></p>\n<p>-The cs015 TAs</p>\n");
        _fromText.setText("cs015headtas@cs.brown.edu");
        updatePreview();
        new File(".tmpdata").mkdirs();
    }

    public void updatePreview() {
        _previewPane.setText(htmlBuilder(Allocator.getCourseInfo().getTestAccount()));
    }

    public String htmlBuilder(String student) {
        String htmlString = "<body style='font-family: sans-serif; font-size: 10pt'><h1 style='font-weight: bold; font-size:11pt'>[cs015] Grade Report</h1>" +
                "<hr />" + _messageText.getText();
        
        //sort the assignments by assignment number
        Vector<Assignment> sortedAsgns = new Vector<Assignment>(_asgnParts.keySet());
        Collections.sort(sortedAsgns, new Comparator() {
            public int compare(Object o1, Object o2) {
                Assignment a1 = (Assignment) o1;
                Assignment a2 = (Assignment) o2;
                return ((Integer)a1.getNumber()).compareTo(a2.getNumber());
            }
            
        });
        
        for (Assignment a : sortedAsgns) {
            htmlString += "<hr /><table cellspacing='0' cellpadding='5' style='width: 100%'><tbody><tr style='font-weight: bold; background: #F0F0F0'><td>" + a.getName() + "</td><td>Earned Points</td><td>Total Points</td></tr>";
            for (Part p : _asgnParts.get(a)) {
                Calendar extension = Allocator.getDatabaseIO().getExtension(student, p);
                if (Allocator.getDatabaseIO().getExemptionNote(student, p) != null) {
                    htmlString += "<tr style='background: #FFFFFF" + "'><td>" + p.getName() + "</td><td>Exemption Granted</td><td>" + p.getPoints() + "</td></tr>";
                }
                else if (extension != null && (extension.getTimeInMillis() < System.currentTimeMillis())) {
                    htmlString += "<tr style='background: #FFFFFF" + "'><td>" + p.getName() + "</td><td>Extension until: " + extension.getTime() + "</td><td>" + p.getPoints() + "</td></tr>";
                }
                else {
                    htmlString += "<tr style='background: #FFFFFF" + "'><td>" + p.getName() + "</td><td>" + Allocator.getDatabaseIO().getStudentScore(student, p) + "</td><td>" + p.getPoints() + "</td></tr>";
                }
            }
            htmlString += "</tbody></table>";
        }
        
        return htmlString;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        _messageText = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        _fromText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        _previewPane = new javax.swing.JEditorPane();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        _sendButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenuBar4 = new javax.swing.JMenuBar();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        attachScoreGraphButton = new javax.swing.JCheckBox();
        attachHistButton = new javax.swing.JCheckBox();
        jMenuBar5 = new javax.swing.JMenuBar();
        jMenu9 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(gradesystem.GradeSystemApp.class).getContext().getResourceMap(GradeReportView.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        _messageText.setColumns(20);
        _messageText.setRows(5);
        _messageText.setName("_messageText"); // NOI18N
        _messageText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                _messageTextKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(_messageText);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        _fromText.setEditable(false);
        _fromText.setText(resourceMap.getString("_fromText.text")); // NOI18N
        _fromText.setName("_fromText"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        _previewPane.setEditable(false);
        _previewPane.setName("_previewPane"); // NOI18N
        jScrollPane3.setViewportView(_previewPane);

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setName("jSeparator1"); // NOI18N

        _sendButton.setText(resourceMap.getString("_sendButton.text")); // NOI18N
        _sendButton.setName("_sendButton"); // NOI18N
        _sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _sendButtonActionPerformed(evt);
            }
        });

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N
        jMenuBar1.add(jMenu1);

        jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu2.setName("jMenu2"); // NOI18N
        jMenuBar1.add(jMenu2);

        jMenuBar2.setName("jMenuBar1"); // NOI18N

        jMenu3.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu3.setName("jMenu1"); // NOI18N
        jMenuBar2.add(jMenu3);

        jMenu4.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu4.setName("jMenu2"); // NOI18N
        jMenuBar2.add(jMenu4);

        jMenuBar3.setName("jMenuBar1"); // NOI18N

        jMenu5.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu5.setName("jMenu1"); // NOI18N
        jMenuBar3.add(jMenu5);

        jMenu6.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu6.setName("jMenu2"); // NOI18N
        jMenuBar3.add(jMenu6);

        jMenuBar4.setName("jMenuBar1"); // NOI18N

        jMenu7.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu7.setName("jMenu1"); // NOI18N
        jMenuBar4.add(jMenu7);

        jMenu8.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu8.setName("jMenu2"); // NOI18N
        jMenuBar4.add(jMenu8);

        attachScoreGraphButton.setSelected(true);
        attachScoreGraphButton.setText(resourceMap.getString("attachScoreGraphButton.text")); // NOI18N
        attachScoreGraphButton.setName("attachScoreGraphButton"); // NOI18N

        attachHistButton.setSelected(true);
        attachHistButton.setText(resourceMap.getString("attachHistButton.text")); // NOI18N
        attachHistButton.setName("attachHistButton"); // NOI18N

        jMenuBar5.setName("jMenuBar1"); // NOI18N

        jMenu9.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu9.setName("jMenu1"); // NOI18N
        jMenuBar5.add(jMenu9);

        jMenu10.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu10.setName("jMenu2"); // NOI18N
        jMenuBar5.add(jMenu10);

        setJMenuBar(jMenuBar5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                                .addGap(305, 305, 305))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(attachHistButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(_fromText, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE))
                                            .addGap(25, 25, 25)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(attachScoreGraphButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(360, 360, 360))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3)
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(_sendButton)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(_fromText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(attachScoreGraphButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attachHistButton))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(_sendButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void _messageTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event__messageTextKeyReleased
        updatePreview();
    }//GEN-LAST:event__messageTextKeyReleased

    private void _sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__sendButtonActionPerformed
        ArrayDeque<File> fullFileList = new ArrayDeque<File>();

        if (attachHistButton.isSelected()) {
            for (Assignment a : _asgnParts.keySet()) {
                try {
                    AssignmentChartPanel acp = new AssignmentChartPanel();
                    acp.updateChartData(a, Allocator.getDatabaseIO().getEnabledStudents().keySet());
                    fullFileList.add(new File(".tmpdata/" + a.getName() + ".png"));
                    ImageIO.write(acp.getImage(600, 250), "png", fullFileList.peekLast());
                } catch (IOException ex) {
                    new ErrorView(ex, "Could not generate histogram image for assignment " + a.getName());
                }
            }  
        }
        
        String[] attachPaths = new String[fullFileList.size()+1];
        int size = fullFileList.size();
        for (int i = 0; i < size; i++) {
            attachPaths[i] = fullFileList.removeFirst().getAbsolutePath();
        }
        attachPaths[attachPaths.length-1] = null;                   //last will be for student chart

        //NOW SEND THE EMAILS we do this after the image creation loop 
        //so that we can guarantee that all the images have been made
        StudentChartPanel scp = new StudentChartPanel();
        for (String student : _students) {
            if (attachScoreGraphButton.isSelected()) {
                try {
                    scp.updateChart(student, _asgnParts.keySet().toArray(new Assignment[0]));
                    fullFileList.add(new File(".tmpdata/" + student + ".png"));
                    ImageIO.write(scp.getImage(600, 250), "png", fullFileList.peekLast());
                    attachPaths[attachPaths.length-1] = (new File(".tmpdata/" + student + ".png")).getAbsolutePath();
                } catch (IOException ex) {
                    new ErrorView(ex, "Could not generate graph for student " + student);
                }
            }    
            
            Allocator.getCourseInfo().getEmailAccount().sendMail("cs015headtas@cs.brown.edu", new String[]{student + "@cs.brown.edu"}, null, null, "[cs015] Grade Report", htmlBuilder(student), attachPaths);
        }
    }//GEN-LAST:event__sendButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField _fromText;
    private javax.swing.JTextArea _messageText;
    private javax.swing.JEditorPane _previewPane;
    private javax.swing.JButton _sendButton;
    private javax.swing.JCheckBox attachHistButton;
    private javax.swing.JCheckBox attachScoreGraphButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuBar jMenuBar4;
    private javax.swing.JMenuBar jMenuBar5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
