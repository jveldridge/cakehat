package cakehat.logging;

import cakehat.Allocator;
import cakehat.CakehatMain;
import cakehat.CakehatReleaseInfo;
import com.google.common.collect.ImmutableSet;
import java.awt.GraphicsEnvironment;
import java.io.PrintWriter;
import java.io.StringWriter;
import javax.mail.MessagingException;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;

/**
 * Manages displaying and reporting of cakehat errors.
 *
 * @author jak2
 */
public class ErrorReporter
{
    private ErrorReporter() { }
    
    /**
     * Initializes the error reporter. This should be called during cakehat initialization.
     */
    public static void initialize()
    {
        CakehatUncaughtExceptionHandler.registerHandler();
    }
    
    /**
     * Reports the {@code error} along with an associated {@code message}. The way the error is reported to the user
     * will differ depending on the graphical environment they are running in.
     * 
     * @param message may be {@code null}
     * @param error may be {@code null}
     */
    public static void report(String message, Throwable error)
    {
        printThrowableIfDeveloper(error);
        
        if(GraphicsEnvironment.isHeadless() || !CakehatMain.getRunMode().hasGUI())
        {
            ErrorDisplayCLI.display(message, error);
        }
        else
        {
            ErrorDisplayView.display(message, error);
        }
    }
    
    /**
     * Reports an error described by {@code message}. The way the error is reported to the user will differ depending on
     * the graphical environment they are running in.
     * 
     * @param message may be {@code null}
     */
    public static void report(String message)
    {
        report(message, null);
    }
    
    /**
     * Reports an {@code error}. The way the error is reported to the user will differ depending on the graphical
     * environment they are running in.
     * 
     * @param error may be {@code null}
     */
    public static void report(Throwable error)
    {
        report(null, error);
    }
    
    /**
     * Reports an error that is an uncaught exception that is not otherwise handled by cakehat.
     * 
     * @param uncaughtException 
     */
    public static void reportUncaughtException(Throwable uncaughtException)
    {
        report("An unhandled exception has occurred. Please report this.", uncaughtException);
    }
    
    private static void printThrowableIfDeveloper(Throwable throwable)
    {
        //If cakehat is running in developer mode or cakehat is not running normally, then print the stack trace to aid
        //debugging (most IDEs allow for clicking inside the stack trace to navigate to the corresponding file and line)
        if(CakehatMain.isDeveloperMode() || !CakehatMain.didStartNormally())
        {
            System.err.println("Throwable encountered. During normal operation cakehat will not print the stack " +
                    "trace to the terminal.");
            throwable.printStackTrace(System.err);
            System.err.println("");
        }
    }
    
    /**
     * Returns the {@code throwable}'s stack trace as a string.
     * 
     * @param throwable
     * @return stack trace
     */
    static String getStackTraceAsString(Throwable throwable)
    {
        StringWriter stringWriter = new StringWriter();
        throwable.printStackTrace(new PrintWriter(stringWriter));
        
        return stringWriter.toString();
    }
    
    /**
     * Emails an error report with the provided arguments.
     * 
     * @param message may be {@code null}
     * @param error may be {@code null}
     * @param userComments may be {@code null}
     */
    static void emailErrorReport(String message, Throwable error, String userComments)
    {
        //Generate subject, include current time to prevent email from threading unrelated exception reports
        //together due to having the same subject
        String subject = "[cakehat] Error Report â€“ " + DateTimeFormat.shortDateTime().print(new DateTime());

        //Generate body with error report information
        StringBuilder body = new StringBuilder("[This is an autogenerated error report]<br/><br/>");
        if(userComments != null && !userComments.isEmpty())
        {
            appendToBody(body, "User Provided Comments", userComments);
        }
        if(message != null && !message.isEmpty())
        {
            appendToBody(body, "Message", message);
        }
        if(error != null)
        {
            appendToBody(body, "Stack Trace", getStackTraceAsString(error));
        }
        appendToBody(body, "Course", Allocator.getCourseInfo().getCourse());
        appendToBody(body, "Run Mode", CakehatMain.getRunMode().toString());
        appendToBody(body, "Developer Mode", Boolean.toString(CakehatMain.isDeveloperMode()));
        appendToBody(body, "Version", CakehatReleaseInfo.getVersion());
        appendToBody(body, "Release Commit Number", CakehatReleaseInfo.getReleaseCommitNumber());
        appendToBody(body, "Release Date", CakehatReleaseInfo.getReleaseDate());
        
        //Email error report
        try
        {
            Allocator.getEmailManager().send(Allocator.getUserServices().getUser().getEmailAddress(),
                                            ImmutableSet.of(Allocator.getEmailManager().getCakehatEmailAddress()),
                                            null,
                                            null,
                                            subject,
                                            body.toString(),
                                            null);
        }
        catch(MessagingException e)
        {
            ErrorReporter.report("Unable to email error report", e);
        }
    }
    
    private static void appendToBody(StringBuilder builder, String title, String value)
    {
        value = value.replace(System.getProperty("line.separator"), "<br/>")
                     .replace("\t", "&nbsp;&nbsp;&nbsp;&nbsp;");
        builder.append("<strong>").append(title).append("</strong>").append("<br/>").append(value).append("<br/><br/>");
    }
}