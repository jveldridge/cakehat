/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DesignQGrader.java
 *
 * Created on Sep 16, 2009, 12:40:19 PM
 */
package backend.entergrade;

import utils.Utils;
import backend.DatabaseIO;
import frontend.grader.rubric.RubricManager;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.tmatesoft.sqljet.core.table.ISqlJetCursor;
import utils.AssignmentType;

/**
 *
 * @author Paul
 */
public class EnterGradesView extends javax.swing.JFrame {

    /** Creates new form DesignQGrader */
    public EnterGradesView() {
        try {
            this.setIconImage(ImageIO.read(getClass().getResource("/gradesystem/resources/icons/32x32/accessories-calculator.png")));
        } catch (Exception e) {
        }
        initComponents();
        this.setLocationRelativeTo(null);
        m_dqearnedText.addKeyListener(new KeyAdapter() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!((c == KeyEvent.VK_PERIOD) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER) || (c == KeyEvent.VK_TAB) || (Character.isDigit(c)))) {
                    e.consume();
                } else if ((c == KeyEvent.VK_PERIOD)) {
                    if (!m_dqearnedText.getText().contains(".")) {
                        if (m_dqearnedText.getText().length() < 1) {
                            m_dqearnedText.setText("0");
                        }
                    } else {
                        e.consume();
                    }
                }

            }
        });
         m_studentText.addKeyListener(new KeyAdapter() {

            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isLetterOrDigit(c)) {
                    e.consume();
                }
            }
        });

        try {
//            this.setIconImage(ImageIO.read(getClass().getResource("/cs015Database/accessories-calculator.png")));
            DefaultTableModel m = (DefaultTableModel) studentTable.getModel();
            m.addColumn("Students");
            for (String s : DatabaseIO.getStudentNames()) {
                m.insertRow(studentTable.getRowCount(), new String[]{s});
            }
            m.insertRow(0, new String[]{""});
            m = (DefaultTableModel) assignmentTable.getModel();
            m.addColumn("Assignments");
            for (String s : DatabaseIO.getAssignmentNames()) {
                if (DatabaseIO.getAssignmentType(s) == AssignmentType.HOMEWORK || (DatabaseIO.getAssignmentType(s) == AssignmentType.PROJECT && DatabaseIO.getAssignmentDQ(s) != 0)) {
                    m.insertRow(assignmentTable.getRowCount(), new String[]{s});
                }
            }
            this.setTitle(Utils.getUserLogin() + " - Add Grades to Database");
            studentTable.getSelectionModel().setSelectionInterval(0, 0);
            studentTable.getColumnModel().getSelectionModel().setSelectionInterval(0, 0);
            assignmentTable.getSelectionModel().setSelectionInterval(0, 0);
            assignmentTable.getColumnModel().getSelectionModel().setSelectionInterval(0, 0);
            m_studentText.setText((String) studentTable.getModel().getValueAt(studentTable.getSelectedRow(), studentTable.getSelectedColumn()));
            m_studentText.setSelectionStart(0);
            m_studentText.setSelectionEnd(m_studentText.getText().length());
            statusLabel.setText("Ready");
            if (m_studentText.getText().length() == 0) {
                m_enterGradeButton.setEnabled(false);
            } else {
                m_enterGradeButton.setEnabled(true);
            }
            update();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addStudentDialog = new javax.swing.JDialog();
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        m_scroll1 = new javax.swing.JScrollPane();
        studentTable = new backend.components.Table();
        m_studentText = new javax.swing.JTextField();
        m_studLabel = new javax.swing.JLabel();
        m_scroll2 = new javax.swing.JScrollPane();
        assignmentTable = new backend.components.Table();
        m_assgnLabel = new javax.swing.JLabel();
        m_earnedLabel = new javax.swing.JLabel();
        m_dqearnedText = new javax.swing.JTextField();
        m_totalLabel = new javax.swing.JLabel();
        m_dqtotalText = new javax.swing.JTextField();
        m_scoreLabel = new javax.swing.JLabel();
        m_dqscoreText = new javax.swing.JTextField();
        m_enterScoreLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        m_enterGradeButton = new javax.swing.JButton();
        m_xmlButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        m_prjpointsLabel = new javax.swing.JLabel();
        m_prjtotalLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        m_prjscoreLabel = new javax.swing.JLabel();
        m_overallGradeLabel = new javax.swing.JLabel();
        m_menu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        addStudentDialog.setTitle("Add Student Dialog");
        addStudentDialog.setMinimumSize(new java.awt.Dimension(466, 130));
        addStudentDialog.setModal(true);
        addStudentDialog.setResizable(false);

        jLabel7.setText("<html>The selected student <b>" + m_studentText.getText() + "</b> was not found.<br />Add the student to the database?");
        jLabel7.setFocusable(false);
        jLabel7.setIconTextGap(20);

        jButton2.setMnemonic('Y');
        jButton2.setText("Yes");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setMnemonic('N');
        jButton3.setText("No");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addStudentDialogLayout = new javax.swing.GroupLayout(addStudentDialog.getContentPane());
        addStudentDialog.getContentPane().setLayout(addStudentDialogLayout);
        addStudentDialogLayout.setHorizontalGroup(
            addStudentDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addStudentDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addStudentDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addStudentDialogLayout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addStudentDialogLayout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13))))
        );
        addStudentDialogLayout.setVerticalGroup(
            addStudentDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addStudentDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addStudentDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Enter Grades");

        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        studentTable.setFocusable(false);
        studentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentTableMouseClicked(evt);
            }
        });
        m_scroll1.setViewportView(studentTable);

        m_studentText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                m_studentTextFocusLost(evt);
            }
        });
        m_studentText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                m_studentTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                m_studentTextKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_studentTextKeyTyped(evt);
            }
        });

        m_studLabel.setFont(new java.awt.Font("Verdana", 1, 12));
        m_studLabel.setText("Select Student");

        assignmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        assignmentTable.setFocusable(false);
        assignmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                assignmentTableMouseClicked(evt);
            }
        });
        assignmentTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                assignmentTableAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        assignmentTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                assignmentTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                assignmentTableKeyReleased(evt);
            }
        });
        m_scroll2.setViewportView(assignmentTable);

        m_assgnLabel.setFont(new java.awt.Font("Verdana", 1, 12));
        m_assgnLabel.setText("Select Assignment");

        m_earnedLabel.setText("Earned Points");

        m_dqearnedText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                m_dqearnedTextMouseClicked(evt);
            }
        });
        m_dqearnedText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                m_dqearnedTextFocusGained(evt);
            }
        });
        m_dqearnedText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                m_dqearnedTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                m_dqearnedTextKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_dqearnedTextKeyTyped(evt);
            }
        });

        m_totalLabel.setText("Total Points");

        m_dqtotalText.setEditable(false);
        m_dqtotalText.setFocusable(false);

        m_scoreLabel.setText("Score (%)");

        m_dqscoreText.setEditable(false);
        m_dqscoreText.setFocusable(false);
        m_dqscoreText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_dqscoreTextActionPerformed(evt);
            }
        });

        m_enterScoreLabel.setFont(new java.awt.Font("Verdana", 1, 12));
        m_enterScoreLabel.setText("Enter Score");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.inactiveCaptionBorder));
        jPanel1.setForeground(java.awt.SystemColor.inactiveCaptionBorder);

        statusLabel.setFont(new java.awt.Font("DejaVu Sans", 0, 11));
        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        statusLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(394, Short.MAX_VALUE)
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
        );

        m_enterGradeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gradesystem/resources/icons/16x16/go-next.png"))); // NOI18N
        m_enterGradeButton.setMnemonic('E');
        m_enterGradeButton.setText("Enter Grade");
        m_enterGradeButton.setIconTextGap(10);
        m_enterGradeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_enterGradeButtonActionPerformed(evt);
            }
        });

        m_xmlButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gradesystem/resources/icons/16x16/mail-send-receive.png"))); // NOI18N
        m_xmlButton.setMnemonic('i');
        m_xmlButton.setText("Import XML Files");
        m_xmlButton.setFocusable(false);
        m_xmlButton.setIconTextGap(10);
        m_xmlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_xmlButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 13));
        jLabel1.setText("Design Questions");

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 13));
        jLabel2.setText("Project");

        jLabel3.setText("Earned Points");

        jLabel4.setText("Total Points");

        jLabel5.setFont(new java.awt.Font("Verdana", 1, 13));
        jLabel5.setText("Overall Grade (%)");

        m_prjpointsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        m_prjpointsLabel.setText("0");

        m_prjtotalLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        m_prjtotalLabel.setText("0");

        jLabel8.setText("Score (%)");

        m_prjscoreLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        m_prjscoreLabel.setText("0");

        m_overallGradeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        m_overallGradeLabel.setText("0");
        m_overallGradeLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("Quit");
        jMenu1.add(jMenuItem1);

        m_menu.add(jMenu1);

        jMenu2.setText("Edit");
        m_menu.add(jMenu2);

        setJMenuBar(m_menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(m_assgnLabel)
                    .addComponent(m_scroll2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(m_studLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(m_studentText, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(m_scroll1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(m_xmlButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m_enterGradeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(m_scoreLabel)
                            .addComponent(m_totalLabel)
                            .addComponent(m_earnedLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(m_dqtotalText, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(m_dqearnedText, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(m_dqscoreText, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)))
                    .addComponent(m_enterScoreLabel)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m_overallGradeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(m_prjscoreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                            .addComponent(m_prjtotalLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                            .addComponent(m_prjpointsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE))))
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m_studLabel)
                    .addComponent(m_assgnLabel)
                    .addComponent(m_enterScoreLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(m_scroll2, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(m_studentText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(m_scroll1, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(m_dqearnedText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(m_earnedLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(m_totalLabel)
                                    .addComponent(m_dqtotalText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(m_scoreLabel)
                                    .addComponent(m_dqscoreText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(m_prjpointsLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(m_prjtotalLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(m_prjscoreLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(m_overallGradeLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(m_enterGradeButton)
                                    .addComponent(m_xmlButton))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void m_dqscoreTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_dqscoreTextActionPerformed
}//GEN-LAST:event_m_dqscoreTextActionPerformed

    private void m_studentTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_studentTextKeyTyped
//        table1.applyFilterSorter();
//        table1.filter(jTextField1.getText());
//        table1.setColumnSelectionAllowed(true);
//        table1.getSelectionModel().setSelectionInterval(0, 0);
//        table1.getColumnModel().getSelectionModel().setSelectionInterval(0, 0);
//        System.out.println(jTextField1.getText());
}//GEN-LAST:event_m_studentTextKeyTyped

    public void updateStatus(String message) {
        statusLabel.setText(message);
        Timer t = new Timer();
        class NewTask extends TimerTask {

            @Override
            public void run() {
                statusLabel.setText("Ready");
                this.cancel();
            }
        }

        t.schedule(new NewTask(), 1000);
    }

    private void update() {
        //determine whether the add XML grades button should be enabled
        m_xmlButton.setEnabled(false);
        for (String s : DatabaseIO.getProjectNames()) {
            if (s.equalsIgnoreCase((String) assignmentTable.getModel().getValueAt(assignmentTable.getSelectedRow(), 0))) {
                m_xmlButton.setEnabled(true);
                break;
            }
        }

        if (m_studentText.getText().length() == 0) {
            m_enterGradeButton.setEnabled(false);
        } else {
            m_enterGradeButton.setEnabled(true);
        }
        String asgn = (String) assignmentTable.getValueAt(assignmentTable.getSelectedRow(), assignmentTable.getSelectedColumn());
        if (studentTable.getRowCount() == 0 || ((String) studentTable.getValueAt(studentTable.getSelectedRow(), studentTable.getSelectedColumn())).length() == 0) {
            m_dqearnedText.setText("");
            m_dqscoreText.setText("");
            if (DatabaseIO.getAssignmentDQ(asgn) == 0) {
                m_dqtotalText.setText("" + DatabaseIO.getAssignmentTotal(asgn));
            } else {
                m_dqtotalText.setText("" + DatabaseIO.getAssignmentDQ(asgn));
            }
            return;
        }

        m_studentText.setText((String) studentTable.getValueAt(studentTable.getSelectedRow(), studentTable.getSelectedColumn()));
        m_studentText.setCaretPosition(0);
        m_studentText.setSelectionStart(0);
        m_studentText.setSelectionEnd(m_studentText.getText().length());
        //Update dq fields

        if (DatabaseIO.getAssignmentDQ(asgn) == 0) {
            m_dqearnedText.setText("" + DatabaseIO.getStudentProjectScore(asgn, m_studentText.getText()));
            m_dqtotalText.setText("" + DatabaseIO.getAssignmentTotal(asgn));
        } else {
            m_dqearnedText.setText("" + DatabaseIO.getStudentDQScore(asgn, m_studentText.getText()));
            m_dqtotalText.setText("" + DatabaseIO.getAssignmentDQ(asgn));
        }
        if (m_dqearnedText.getText().length() > 0 && m_dqtotalText.getText().length() > 0) {
            m_dqscoreText.setText("" + (Double.parseDouble(m_dqearnedText.getText()) / Double.parseDouble(m_dqtotalText.getText()) * 100));
        } else {
            m_dqscoreText.setText("");
        }
        //Update project fields
        if (DatabaseIO.getAssignmentType(asgn) == AssignmentType.PROJECT) {
            m_prjpointsLabel.setText("" + (DatabaseIO.getStudentProjectScore(asgn, m_studentText.getText()) - Double.parseDouble(m_dqearnedText.getText())));
            m_prjtotalLabel.setText("" + DatabaseIO.getAssignmentPoints(asgn));
            m_prjscoreLabel.setText("" + ((Double.parseDouble(m_prjpointsLabel.getText()) / Double.parseDouble(m_prjtotalLabel.getText())) * 100));
        } else {
            m_prjpointsLabel.setText("0");
            m_prjtotalLabel.setText("0");
            m_prjscoreLabel.setText("0");
        }
        //Update grade overall field
        m_overallGradeLabel.setText("" + ((Double.parseDouble(m_prjpointsLabel.getText()) + Double.parseDouble(m_dqearnedText.getText())) / (Double.parseDouble(m_dqtotalText.getText()) + Double.parseDouble(m_prjtotalLabel.getText())) * 100));
    }

    private void m_studentTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_m_studentTextFocusLost
        //update();
}//GEN-LAST:event_m_studentTextFocusLost

    private void m_studentTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_studentTextKeyPressed

        if (evt.getKeyCode() == 38 && studentTable.getSelectedRow() != 0) { //up
            studentTable.getSelectionModel().setSelectionInterval(studentTable.getSelectedRow() - 1, studentTable.getSelectedRow() - 1);
        //update();
        } else if (evt.getKeyCode() == 40 && studentTable.getSelectedRow() != studentTable.getRowCount() - 1) { //down
            studentTable.getSelectionModel().setSelectionInterval(studentTable.getSelectedRow() + 1, studentTable.getSelectedRow() + 1);
        //update();
        } else if (evt.getKeyCode() == 10) { //Enter key
            m_dqearnedText.requestFocus();
        }
}//GEN-LAST:event_m_studentTextKeyPressed

    private void m_dqearnedTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_dqearnedTextKeyTyped
}//GEN-LAST:event_m_dqearnedTextKeyTyped

    private void studentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentTableMouseClicked
        if (studentTable.getRowCount() == 0 || ((String) studentTable.getValueAt(studentTable.getSelectedRow(), studentTable.getSelectedColumn())).length() == 0) {
            m_studentText.setText("");
        }
        update();
}//GEN-LAST:event_studentTableMouseClicked

    private void assignmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assignmentTableMouseClicked
        update();
}//GEN-LAST:event_assignmentTableMouseClicked

    private void m_dqearnedTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_dqearnedTextKeyPressed
        if (evt.getKeyCode() == 10) {
            m_enterGradeButtonActionPerformed(null);
        }
}//GEN-LAST:event_m_dqearnedTextKeyPressed

    private void m_enterGradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_enterGradeButtonActionPerformed
        try {
            String assignmentName = (String) assignmentTable.getModel().getValueAt(assignmentTable.getSelectedRow(), assignmentTable.getSelectedColumn());
            String studentLogin = m_studentText.getText();
            long row = DatabaseIO.getRowID("grades_" + assignmentName, "stud_login_" + assignmentName, studentLogin);
            if (DatabaseIO.getDataCell("grades_" + assignmentName, row, "studLogins").compareToIgnoreCase(studentLogin) == 0) {
                String[] s = (String[]) DatabaseIO.getDataRow("grades_" + assignmentName, row);
                s[1] = m_dqearnedText.getText();
                if(s.length==3) {
                    s[2] = m_dqearnedText.getText();
                }
                DatabaseIO.update(row, "grades_" + assignmentName, (Object[]) s);
                updateStatus("Written to database");
            } else {
                jLabel7.setText("<html>The selected student <b>" + m_studentText.getText() + "</b> was not found.<br />Add the student to the database?");
                addStudentDialog.setLocationRelativeTo(null);
                addStudentDialog.setVisible(true);
            }
            m_studentText.requestFocus();
            m_studentText.setText("");
            m_dqearnedText.setText("");
            m_dqscoreText.setText("");
            m_studentTextKeyTyped(null);

        } catch (Exception e) {
            e.printStackTrace();
        }
}//GEN-LAST:event_m_enterGradeButtonActionPerformed

    private void m_dqearnedTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_m_dqearnedTextFocusGained
        update();
        m_dqearnedText.setSelectionStart(0);
        m_dqearnedText.setSelectionEnd(m_studentText.getText().length());
}//GEN-LAST:event_m_dqearnedTextFocusGained

    private void m_dqearnedTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_m_dqearnedTextMouseClicked
        // TODO add your handling code here
}//GEN-LAST:event_m_dqearnedTextMouseClicked

    private void m_studentTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_studentTextKeyReleased
        if (evt.getKeyCode() == 27) { //Esc key
            studentTable.applyFilterSorter();
            studentTable.filter("");
            studentTable.setColumnSelectionAllowed(true);
            studentTable.getSelectionModel().setSelectionInterval(0, 0);
            studentTable.getColumnModel().getSelectionModel().setSelectionInterval(0, 0);
            return;
        }
        if (evt.getKeyCode() == 38 || evt.getKeyCode() == 40) { //up

            m_studentText.setText("");
            update();
            return;
        }
        if (m_studentText.getText().length() == 0) {
            m_enterGradeButton.setEnabled(false);
        } else {
            m_enterGradeButton.setEnabled(true);
        }
        studentTable.applyFilterSorter();
        studentTable.filter(m_studentText.getText());
        studentTable.setColumnSelectionAllowed(true);
        studentTable.getSelectionModel().setSelectionInterval(0, 0);
        studentTable.getColumnModel().getSelectionModel().setSelectionInterval(0, 0);
}//GEN-LAST:event_m_studentTextKeyReleased

    private void assignmentTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_assignmentTableKeyReleased
        // TODO add your handling code here:
}//GEN-LAST:event_assignmentTableKeyReleased

    private void assignmentTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_assignmentTableKeyPressed
        update();
}//GEN-LAST:event_assignmentTableKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DatabaseIO.addStudent(m_studentText.getText());
        String assignmentName = (String) assignmentTable.getModel().getValueAt(assignmentTable.getSelectedRow(), assignmentTable.getSelectedColumn());
        String studentLogin = m_studentText.getText();
        long row = DatabaseIO.getRowID("grades_" + assignmentName, "stud_login_" + assignmentName, studentLogin);
        String[] s = (String[]) DatabaseIO.getDataRow("grades_" + assignmentName, row);
        s[1] = m_dqearnedText.getText();
        try {
            DatabaseIO.update(row, "grades_" + assignmentName, (Object[]) s);
            updateStatus("Written to database");
        } catch (Exception e) {
            e.printStackTrace();
        }
        addStudentDialog.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void m_dqearnedTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_dqearnedTextKeyReleased
        if (m_dqearnedText.getText().length() > 0 && m_dqtotalText.getText().length() > 0) {
            m_dqscoreText.setText("" + (Double.parseDouble(m_dqearnedText.getText()) / Double.parseDouble(m_dqtotalText.getText()) * 100));
        } else {
            m_dqscoreText.setText("");
        }
}//GEN-LAST:event_m_dqearnedTextKeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        addStudentDialog.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void assignmentTableAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_assignmentTableAncestorAdded
        // TODO add your handling code here:
}//GEN-LAST:event_assignmentTableAncestorAdded

    private void m_xmlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_xmlButtonActionPerformed
        String asgn = (String) assignmentTable.getModel().getValueAt(assignmentTable.getSelectedRow(), 0);
        HashMap<String, Double> hm = RubricManager.getAllScores(asgn);
        try {
            for (Object o : hm.keySet()) {
                ISqlJetCursor c = DatabaseIO.getItemWithFilter("grades_" + asgn, "stud_login_" + asgn, (String) o);
                String[] data = (String[]) DatabaseIO.getDataRow("grades_" + asgn, c.getRowId());
                if (data[0].compareToIgnoreCase((String) o) != 0) {
                    DatabaseIO.addStudent((String) o);
                    c = DatabaseIO.getItemWithFilter("grades_" + asgn, "stud_login_" + asgn, (String) o);
                    data = (String[]) DatabaseIO.getDataRow("grades_" + asgn, c.getRowId());
                    System.out.println("Student " + (String) o + " added.");
                }
                data[data.length - 1] = Double.toString(hm.get(o));
                c.update((Object[]) data);
            }
            JOptionPane.showMessageDialog(this, "Grades for " + asgn + " have been successfully added to the database.", "Added", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error while adding grades to database.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
}//GEN-LAST:event_m_xmlButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new EnterGradesView().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog addStudentDialog;
    private backend.components.Table assignmentTable;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel m_assgnLabel;
    private javax.swing.JTextField m_dqearnedText;
    private javax.swing.JTextField m_dqscoreText;
    private javax.swing.JTextField m_dqtotalText;
    private javax.swing.JLabel m_earnedLabel;
    private javax.swing.JButton m_enterGradeButton;
    private javax.swing.JLabel m_enterScoreLabel;
    private javax.swing.JMenuBar m_menu;
    private javax.swing.JLabel m_overallGradeLabel;
    private javax.swing.JLabel m_prjpointsLabel;
    private javax.swing.JLabel m_prjscoreLabel;
    private javax.swing.JLabel m_prjtotalLabel;
    private javax.swing.JLabel m_scoreLabel;
    private javax.swing.JScrollPane m_scroll1;
    private javax.swing.JScrollPane m_scroll2;
    private javax.swing.JLabel m_studLabel;
    private javax.swing.JTextField m_studentText;
    private javax.swing.JLabel m_totalLabel;
    private javax.swing.JButton m_xmlButton;
    private javax.swing.JLabel statusLabel;
    private backend.components.Table studentTable;
    // End of variables declaration//GEN-END:variables
}
