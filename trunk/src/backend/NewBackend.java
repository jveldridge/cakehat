package backend;

import backend.assignmentdist.AssignmentdistView;
import backend.assignmentdist.ReassignView;
import backend.gradereport.GradeReportView;
import backend.histogram.HistogramView;
import config.Assignment;
import config.LabPart;
import config.NonHandinPart;
import config.Part;
import java.awt.CardLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import utils.Allocator;

/**
 * Backend interface.
 * 
 * @author jeldridg
 * Created on Dec 26, 2009, 6:29:58 PM
 */
public class NewBackend extends javax.swing.JFrame {

    ArrayList<JButton> _asgnButtons, _studButtons;
    ArrayList<JButton> _multiStudButtons;
    ArrayList<JButton> _multiAsgnButtons;
    private String[] _studentLogins;
    private HashMap<String,JTextField> _rbMap;
    private HashMap<String,JComboBox> _comboMap;
    
    /** Creates new form NewJFrame */
    public NewBackend() {
        initComponents();
        submitGradeButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                submitGradeActionPerformed();
            }
        });
        
        submitGradeButton.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    submitGradeActionPerformed();
                }
            }
        });
        
        nonHandinEarned.addKeyListener(new GradeBoxKeyListener());
        handinEarned.addKeyListener(new GradeBoxKeyListener());
        labEarned.addKeyListener(new GradeBoxKeyListener());
        
        nonHandinRb.setActionCommand("nonHandin");
        labRb.setActionCommand("lab");
        handinRB.setActionCommand("handin");
        
        _comboMap = new HashMap<String,JComboBox>();
        _comboMap.put(nonHandinRb.getActionCommand(), nonHandinPartsComboBox);
        _comboMap.put(labRb.getActionCommand(), labComboBox);
        
        _rbMap = new HashMap<String,JTextField>();
        _rbMap.put(nonHandinRb.getActionCommand(), nonHandinEarned);
        _rbMap.put(labRb.getActionCommand(), labEarned);
        _rbMap.put(handinRB.getActionCommand(), handinEarned);
        
        _asgnButtons = new ArrayList(Arrays.asList(generateDistButton, previewRubricButton, reassignGradingButton,
                                                    gradingStandardsButton, demoButton, importGradesButton));
        _studButtons = new ArrayList(Arrays.asList(statisticsButton, sendGradesButton, openButton, runCodeButton,
                                                    testCodeButton, extensionButton, exemptionButton, printCodeButton,
                                                    printRubricButton, viewRubricButton, toggleEnabledButton));
        _multiStudButtons = new ArrayList(Arrays.asList(printRubricButton, statisticsButton, sendGradesButton, extensionButton, exemptionButton));
        _multiAsgnButtons = new ArrayList(Arrays.asList(importGradesButton));

        //populate assignment list
        assignmentList.setListData(Allocator.getCourseInfo().getHandinAssignments().toArray());

        //populate student list
        List<String> students = new LinkedList<String>(Allocator.getDatabaseIO().getAllStudents().keySet());
        _studentLogins = students.toArray(new String[0]);
        Arrays.sort(_studentLogins);
        studentList.setListData(_studentLogins);

        this.updateGUI();

        CardLayout cl = (CardLayout) cardPanel.getLayout();
        cl.show(cardPanel, "instructionCard");

        //make the user's temporary grading directory
        Allocator.getGradingUtilities().makeUserGradingDirectory();

        this.addWindowListener(new WindowAdapter() {
            @Override //remove user grading directory when backend is closed
            public void windowClosing(WindowEvent e) {
                Allocator.getGradingUtilities().removeUserGradingDirectory();
            }
        });

        this.setResizable(false);
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        partsButtonGroup = new javax.swing.ButtonGroup();
        centerPanel = new javax.swing.JPanel();
        selectedStudsLabel = new javax.swing.JLabel();
        selectedAsgnLabel = new javax.swing.JLabel();
        generateDistButton = new javax.swing.JButton();
        reassignGradingButton = new javax.swing.JButton();
        statisticsButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        importGradesButton = new javax.swing.JButton();
        runCodeButton = new javax.swing.JButton();
        testCodeButton = new javax.swing.JButton();
        viewRubricButton = new javax.swing.JButton();
        extensionButton = new javax.swing.JButton();
        exemptionButton = new javax.swing.JButton();
        demoButton = new javax.swing.JButton();
        printCodeButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        previewRubricButton = new javax.swing.JButton();
        gradingStandardsButton = new javax.swing.JButton();
        cardPanel = new javax.swing.JPanel();
        multiSelectedPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        instructionsPanel = new javax.swing.JPanel();
        welcomeLabel = new javax.swing.JLabel();
        instructionsLabel = new javax.swing.JLabel();
        singleSelectedPanel = new javax.swing.JPanel();
        writtenEarnedLabel = new javax.swing.JLabel();
        nonHandinEarned = new javax.swing.JTextField();
        writtenTotalLabel = new javax.swing.JLabel();
        nonHandinScoreLabel = new javax.swing.JLabel();
        overallScoreValue = new javax.swing.JLabel();
        overallEarnedLabel = new javax.swing.JLabel();
        overalTotalLabel = new javax.swing.JLabel();
        overallScoreLabel = new javax.swing.JLabel();
        overallEarnedValue = new javax.swing.JLabel();
        overallTotalValue = new javax.swing.JLabel();
        submitGradeButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nonHandinPartsComboBox = new javax.swing.JComboBox();
        writtenScoreValue1 = new javax.swing.JLabel();
        nonHandinScoreValue = new javax.swing.JLabel();
        nonHandinOutOf = new javax.swing.JTextField();
        nonHandinRb = new javax.swing.JRadioButton();
        labRb = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        labComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        labOutOf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        labEarned = new javax.swing.JTextField();
        labScoreLabel = new javax.swing.JLabel();
        handinRB = new javax.swing.JRadioButton();
        labScoreValue = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        handinEarned = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        handinOutOf = new javax.swing.JTextField();
        handinScoreLabel = new javax.swing.JLabel();
        handinScoreValue = new javax.swing.JLabel();
        overallRb = new javax.swing.JRadioButton();
        sendGradesButton = new javax.swing.JButton();
        printRubricButton = new javax.swing.JButton();
        toggleEnabledButton = new javax.swing.JButton();
        leftPanel = new javax.swing.JPanel();
        studentFilter = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        assignmentList = new javax.swing.JList();
        studentsLabel = new javax.swing.JLabel();
        asgnSelectAllButton = new javax.swing.JButton();
        studentSelectAllButton = new javax.swing.JButton();
        asgnTypeComboBox = new javax.swing.JComboBox();
        asgnSelectNoneButton = new javax.swing.JButton();
        studentSelectNoneButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        studentList = new javax.swing.JList();
        assignmentsLabel = new javax.swing.JLabel();
        assignmentsLabel1 = new javax.swing.JLabel();
        rightPanel = new javax.swing.JPanel();
        generalCommandsLabel = new javax.swing.JLabel();
        blacklistButton = new javax.swing.JButton();
        configButton = new javax.swing.JButton();
        exportDBButton = new javax.swing.JButton();
        resetDatabaseButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        quitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cakehat - Backend - " + Allocator.getGeneralUtilities().getUserLogin());
        setName("Form"); // NOI18N

        centerPanel.setName("centerPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(gradesystem.GradeSystemApp.class).getContext().getResourceMap(NewBackend.class);
        selectedStudsLabel.setText(resourceMap.getString("selectedStudsLabel.text")); // NOI18N
        selectedStudsLabel.setName("selectedStudsLabel"); // NOI18N

        selectedAsgnLabel.setText(resourceMap.getString("selectedAsgnLabel.text")); // NOI18N
        selectedAsgnLabel.setName("selectedAsgnLabel"); // NOI18N

        generateDistButton.setIcon(resourceMap.getIcon("generateDistButton.icon")); // NOI18N
        generateDistButton.setText(resourceMap.getString("generateDistButton.text")); // NOI18N
        generateDistButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        generateDistButton.setIconTextGap(5);
        generateDistButton.setName("generateDistButton"); // NOI18N
        generateDistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateDistButtonActionPerformed(evt);
            }
        });

        reassignGradingButton.setIcon(resourceMap.getIcon("reassignGradingButton.icon")); // NOI18N
        reassignGradingButton.setText(resourceMap.getString("reassignGradingButton.text")); // NOI18N
        reassignGradingButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        reassignGradingButton.setIconTextGap(5);
        reassignGradingButton.setName("reassignGradingButton"); // NOI18N
        reassignGradingButton.setPreferredSize(new java.awt.Dimension(170, 29));
        reassignGradingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reassignGradingButtonActionPerformed(evt);
            }
        });

        statisticsButton.setIcon(resourceMap.getIcon("statisticsButton.icon")); // NOI18N
        statisticsButton.setText(resourceMap.getString("statisticsButton.text")); // NOI18N
        statisticsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statisticsButton.setIconTextGap(5);
        statisticsButton.setName("statisticsButton"); // NOI18N
        statisticsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statisticsButtonActionPerformed(evt);
            }
        });

        jSeparator1.setName("jSeparator1"); // NOI18N

        importGradesButton.setIcon(resourceMap.getIcon("importGradesButton.icon")); // NOI18N
        importGradesButton.setText(resourceMap.getString("importGradesButton.text")); // NOI18N
        importGradesButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        importGradesButton.setIconTextGap(5);
        importGradesButton.setName("importGradesButton"); // NOI18N
        importGradesButton.setPreferredSize(new java.awt.Dimension(170, 29));
        importGradesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importGradesButtonActionPerformed(evt);
            }
        });

        runCodeButton.setIcon(resourceMap.getIcon("runCodeButton.icon")); // NOI18N
        runCodeButton.setText(resourceMap.getString("runCodeButton.text")); // NOI18N
        runCodeButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        runCodeButton.setIconTextGap(5);
        runCodeButton.setName("runCodeButton"); // NOI18N
        runCodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runCodeButtonActionPerformed(evt);
            }
        });

        testCodeButton.setIcon(resourceMap.getIcon("testCodeButton.icon")); // NOI18N
        testCodeButton.setText(resourceMap.getString("testCodeButton.text")); // NOI18N
        testCodeButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        testCodeButton.setIconTextGap(5);
        testCodeButton.setName("testCodeButton"); // NOI18N
        testCodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testCodeButtonActionPerformed(evt);
            }
        });

        viewRubricButton.setIcon(resourceMap.getIcon("viewRubricButton.icon")); // NOI18N
        viewRubricButton.setText(resourceMap.getString("viewRubricButton.text")); // NOI18N
        viewRubricButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        viewRubricButton.setIconTextGap(5);
        viewRubricButton.setName("viewRubricButton"); // NOI18N
        viewRubricButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRubricButtonActionPerformed(evt);
            }
        });

        extensionButton.setIcon(resourceMap.getIcon("extensionButton.icon")); // NOI18N
        extensionButton.setText(resourceMap.getString("extensionButton.text")); // NOI18N
        extensionButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        extensionButton.setIconTextGap(5);
        extensionButton.setName("extensionButton"); // NOI18N
        extensionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extensionButtonActionPerformed(evt);
            }
        });

        exemptionButton.setIcon(resourceMap.getIcon("exemptionButton.icon")); // NOI18N
        exemptionButton.setText(resourceMap.getString("exemptionButton.text")); // NOI18N
        exemptionButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        exemptionButton.setIconTextGap(5);
        exemptionButton.setName("exemptionButton"); // NOI18N

        demoButton.setIcon(resourceMap.getIcon("demoButton.icon")); // NOI18N
        demoButton.setText(resourceMap.getString("demoButton.text")); // NOI18N
        demoButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        demoButton.setIconTextGap(5);
        demoButton.setName("demoButton"); // NOI18N
        demoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                demoButtonActionPerformed(evt);
            }
        });

        printCodeButton.setIcon(resourceMap.getIcon("printCodeButton.icon")); // NOI18N
        printCodeButton.setText(resourceMap.getString("printCodeButton.text")); // NOI18N
        printCodeButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        printCodeButton.setIconTextGap(5);
        printCodeButton.setName("printCodeButton"); // NOI18N
        printCodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printCodeButtonActionPerformed(evt);
            }
        });

        openButton.setIcon(resourceMap.getIcon("openButton.icon")); // NOI18N
        openButton.setText(resourceMap.getString("openButton.text")); // NOI18N
        openButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        openButton.setIconTextGap(5);
        openButton.setName("openButton"); // NOI18N
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        previewRubricButton.setIcon(resourceMap.getIcon("previewRubricButton.icon")); // NOI18N
        previewRubricButton.setText(resourceMap.getString("previewRubricButton.text")); // NOI18N
        previewRubricButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        previewRubricButton.setIconTextGap(5);
        previewRubricButton.setName("previewRubricButton"); // NOI18N
        previewRubricButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewRubricButtonActionPerformed(evt);
            }
        });

        gradingStandardsButton.setIcon(resourceMap.getIcon("gradingStandardsButton.icon")); // NOI18N
        gradingStandardsButton.setText(resourceMap.getString("gradingStandardsButton.text")); // NOI18N
        gradingStandardsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        gradingStandardsButton.setIconTextGap(5);
        gradingStandardsButton.setName("gradingStandardsButton"); // NOI18N
        gradingStandardsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradingStandardsButtonActionPerformed(evt);
            }
        });

        cardPanel.setName("cardPanel"); // NOI18N
        cardPanel.setLayout(new CardLayout());
        cardPanel.setLayout(new java.awt.CardLayout());

        multiSelectedPanel.setName(""); // NOI18N

        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout multiSelectedPanelLayout = new javax.swing.GroupLayout(multiSelectedPanel);
        multiSelectedPanel.setLayout(multiSelectedPanelLayout);
        multiSelectedPanelLayout.setHorizontalGroup(
            multiSelectedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(multiSelectedPanelLayout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(jLabel1)
                .addContainerGap(204, Short.MAX_VALUE))
        );
        multiSelectedPanelLayout.setVerticalGroup(
            multiSelectedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(multiSelectedPanelLayout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(jLabel1)
                .addContainerGap(455, Short.MAX_VALUE))
        );

        cardPanel.add(multiSelectedPanel, "multiPanel");

        instructionsPanel.setName("instructionsPanel"); // NOI18N

        welcomeLabel.setFont(resourceMap.getFont("welcomeLabel.font")); // NOI18N
        welcomeLabel.setText(resourceMap.getString("welcomeLabel.text")); // NOI18N
        welcomeLabel.setName("welcomeLabel"); // NOI18N

        instructionsLabel.setText(resourceMap.getString("instructionsLabel.text")); // NOI18N
        instructionsLabel.setName("instructionsLabel"); // NOI18N

        javax.swing.GroupLayout instructionsPanelLayout = new javax.swing.GroupLayout(instructionsPanel);
        instructionsPanel.setLayout(instructionsPanelLayout);
        instructionsPanelLayout.setHorizontalGroup(
            instructionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instructionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(instructionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(instructionsPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(instructionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(welcomeLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        instructionsPanelLayout.setVerticalGroup(
            instructionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instructionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(instructionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(452, Short.MAX_VALUE))
        );

        cardPanel.add(instructionsPanel, "instructionCard");

        singleSelectedPanel.setName(""); // NOI18N

        writtenEarnedLabel.setText(resourceMap.getString("writtenEarnedLabel.text")); // NOI18N
        writtenEarnedLabel.setName("writtenEarnedLabel"); // NOI18N
        singleSelectedPanel.add(writtenEarnedLabel);

        nonHandinEarned.setName("nonHandinEarned"); // NOI18N
        singleSelectedPanel.add(nonHandinEarned);

        writtenTotalLabel.setText(resourceMap.getString("writtenTotalLabel.text")); // NOI18N
        writtenTotalLabel.setName("writtenTotalLabel"); // NOI18N
        singleSelectedPanel.add(writtenTotalLabel);

        nonHandinScoreLabel.setText(resourceMap.getString("nonHandinScoreLabel.text")); // NOI18N
        nonHandinScoreLabel.setName("nonHandinScoreLabel"); // NOI18N
        singleSelectedPanel.add(nonHandinScoreLabel);

        overallScoreValue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        overallScoreValue.setText(resourceMap.getString("overallScoreValue.text")); // NOI18N
        overallScoreValue.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        overallScoreValue.setName("overallScoreValue"); // NOI18N
        singleSelectedPanel.add(overallScoreValue);

        overallEarnedLabel.setText(resourceMap.getString("overallEarnedLabel.text")); // NOI18N
        overallEarnedLabel.setName("overallEarnedLabel"); // NOI18N
        singleSelectedPanel.add(overallEarnedLabel);

        overalTotalLabel.setText(resourceMap.getString("overalTotalLabel.text")); // NOI18N
        overalTotalLabel.setName("overalTotalLabel"); // NOI18N
        singleSelectedPanel.add(overalTotalLabel);

        overallScoreLabel.setText(resourceMap.getString("overallScoreLabel.text")); // NOI18N
        overallScoreLabel.setName("overallScoreLabel"); // NOI18N
        singleSelectedPanel.add(overallScoreLabel);

        overallEarnedValue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        overallEarnedValue.setText(resourceMap.getString("overallEarnedValue.text")); // NOI18N
        overallEarnedValue.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        overallEarnedValue.setName("overallEarnedValue"); // NOI18N
        singleSelectedPanel.add(overallEarnedValue);

        overallTotalValue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        overallTotalValue.setText(resourceMap.getString("overallTotalValue.text")); // NOI18N
        overallTotalValue.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        overallTotalValue.setName("overallTotalValue"); // NOI18N
        singleSelectedPanel.add(overallTotalValue);

        submitGradeButton.setIcon(resourceMap.getIcon("submitGradeButton.icon")); // NOI18N
        submitGradeButton.setText(resourceMap.getString("submitGradeButton.text")); // NOI18N
        submitGradeButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        submitGradeButton.setIconTextGap(5);
        submitGradeButton.setName("submitGradeButton"); // NOI18N
        singleSelectedPanel.add(submitGradeButton);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        singleSelectedPanel.add(jLabel2);

        nonHandinPartsComboBox.setName("nonHandinPartsComboBox"); // NOI18N
        singleSelectedPanel.add(nonHandinPartsComboBox);

        writtenScoreValue1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        writtenScoreValue1.setText(resourceMap.getString("writtenScoreValue1.text")); // NOI18N
        writtenScoreValue1.setName("writtenScoreValue1"); // NOI18N
        singleSelectedPanel.add(writtenScoreValue1);

        nonHandinScoreValue.setText(resourceMap.getString("nonHandinScoreValue.text")); // NOI18N
        nonHandinScoreValue.setName("nonHandinScoreValue"); // NOI18N
        singleSelectedPanel.add(nonHandinScoreValue);

        nonHandinOutOf.setEditable(false);
        nonHandinOutOf.setName("nonHandinOutOf"); // NOI18N
        singleSelectedPanel.add(nonHandinOutOf);

        partsButtonGroup.add(nonHandinRb);
        nonHandinRb.setText(resourceMap.getString("nonHandinRb.text")); // NOI18N
        nonHandinRb.setName("nonHandinRb"); // NOI18N
        singleSelectedPanel.add(nonHandinRb);

        partsButtonGroup.add(labRb);
        labRb.setText(resourceMap.getString("labRb.text")); // NOI18N
        labRb.setName("labRb"); // NOI18N
        singleSelectedPanel.add(labRb);

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        singleSelectedPanel.add(jLabel4);

        labComboBox.setName("labComboBox"); // NOI18N
        singleSelectedPanel.add(labComboBox);

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        singleSelectedPanel.add(jLabel5);

        labOutOf.setEditable(false);
        labOutOf.setText(resourceMap.getString("labOutOf.text")); // NOI18N
        labOutOf.setName("labOutOf"); // NOI18N
        singleSelectedPanel.add(labOutOf);

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        singleSelectedPanel.add(jLabel6);

        labEarned.setName("labEarned"); // NOI18N
        singleSelectedPanel.add(labEarned);

        labScoreLabel.setText(resourceMap.getString("labScoreLabel.text")); // NOI18N
        labScoreLabel.setName("labScoreLabel"); // NOI18N
        singleSelectedPanel.add(labScoreLabel);

        partsButtonGroup.add(handinRB);
        handinRB.setText(resourceMap.getString("handinRB.text")); // NOI18N
        handinRB.setName("handinRB"); // NOI18N
        singleSelectedPanel.add(handinRB);

        labScoreValue.setText(resourceMap.getString("labScoreValue.text")); // NOI18N
        labScoreValue.setName("labScoreValue"); // NOI18N
        singleSelectedPanel.add(labScoreValue);

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N
        singleSelectedPanel.add(jLabel9);

        handinEarned.setName("handinEarned"); // NOI18N
        singleSelectedPanel.add(handinEarned);

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N
        singleSelectedPanel.add(jLabel10);

        handinOutOf.setEditable(false);
        handinOutOf.setName("handinOutOf"); // NOI18N
        singleSelectedPanel.add(handinOutOf);

        handinScoreLabel.setText(resourceMap.getString("handinScoreLabel.text")); // NOI18N
        handinScoreLabel.setName("handinScoreLabel"); // NOI18N
        singleSelectedPanel.add(handinScoreLabel);

        handinScoreValue.setText(resourceMap.getString("handinScoreValue.text")); // NOI18N
        handinScoreValue.setName("handinScoreValue"); // NOI18N
        singleSelectedPanel.add(handinScoreValue);

        partsButtonGroup.add(overallRb);
        overallRb.setText(resourceMap.getString("overallRb.text")); // NOI18N
        overallRb.setName("overallRb"); // NOI18N
        singleSelectedPanel.add(overallRb);

        cardPanel.add(singleSelectedPanel, "singlePanel");

        sendGradesButton.setIcon(resourceMap.getIcon("sendGradesButton.icon")); // NOI18N
        sendGradesButton.setText(resourceMap.getString("sendGradesButton.text")); // NOI18N
        sendGradesButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        sendGradesButton.setIconTextGap(5);
        sendGradesButton.setName("sendGradesButton"); // NOI18N
        sendGradesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendGradesButtonActionPerformed(evt);
            }
        });

        printRubricButton.setIcon(resourceMap.getIcon("printRubricButton.icon")); // NOI18N
        printRubricButton.setText(resourceMap.getString("printRubricButton.text")); // NOI18N
        printRubricButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        printRubricButton.setIconTextGap(5);
        printRubricButton.setName("printRubricButton"); // NOI18N
        printRubricButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printRubricButtonActionPerformed(evt);
            }
        });

        toggleEnabledButton.setIcon(resourceMap.getIcon("toggleEnabledButton.icon")); // NOI18N
        toggleEnabledButton.setText(resourceMap.getString("toggleEnabledButton.text")); // NOI18N
        toggleEnabledButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        toggleEnabledButton.setIconTextGap(5);
        toggleEnabledButton.setInheritsPopupMenu(true);
        toggleEnabledButton.setName("toggleEnabledButton"); // NOI18N

        javax.swing.GroupLayout centerPanelLayout = new javax.swing.GroupLayout(centerPanel);
        centerPanel.setLayout(centerPanelLayout);
        centerPanelLayout.setHorizontalGroup(
            centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(centerPanelLayout.createSequentialGroup()
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(centerPanelLayout.createSequentialGroup()
                                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(generateDistButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(previewRubricButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(reassignGradingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gradingStandardsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(importGradesButton, 0, 0, Short.MAX_VALUE)
                                    .addComponent(demoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(selectedAsgnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(centerPanelLayout.createSequentialGroup()
                                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(selectedStudsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(printCodeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(testCodeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(runCodeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(openButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(exemptionButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(extensionButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sendGradesButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(statisticsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(printRubricButton, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                                    .addComponent(viewRubricButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(toggleEnabledButton, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)))))
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12))
        );
        centerPanelLayout.setVerticalGroup(
            centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(centerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectedAsgnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addComponent(generateDistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(previewRubricButton))
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addComponent(reassignGradingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(gradingStandardsButton))
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addComponent(importGradesButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(demoButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(selectedStudsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addComponent(statisticsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendGradesButton)
                        .addGap(18, 18, 18)
                        .addComponent(extensionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exemptionButton)
                        .addGap(18, 18, 18)
                        .addComponent(openButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runCodeButton)
                        .addGap(9, 9, 9)
                        .addComponent(testCodeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(printCodeButton)
                        .addGap(18, 18, 18)
                        .addComponent(viewRubricButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(printRubricButton)
                        .addGap(18, 18, 18)
                        .addComponent(toggleEnabledButton))
                    .addComponent(cardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE))
                .addContainerGap())
        );

        leftPanel.setMinimumSize(new java.awt.Dimension(350, 0));
        leftPanel.setName("leftPanel"); // NOI18N
        leftPanel.setPreferredSize(new java.awt.Dimension(350, 522));

        studentFilter.setName("studentFilter"); // NOI18N
        studentFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                studentFilterKeyReleased(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        assignmentList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        assignmentList.setName("assignmentList"); // NOI18N
        assignmentList.setPreferredSize(null);
        assignmentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                assignmentListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(assignmentList);

        studentsLabel.setName("studentsLabel"); // NOI18N

        asgnSelectAllButton.setText(resourceMap.getString("asgnSelectAllButton.text")); // NOI18N
        asgnSelectAllButton.setName("asgnSelectAllButton"); // NOI18N
        asgnSelectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asgnSelectAllButtonActionPerformed(evt);
            }
        });

        studentSelectAllButton.setText(resourceMap.getString("studentSelectAllButton.text")); // NOI18N
        studentSelectAllButton.setName("studentSelectAllButton"); // NOI18N
        studentSelectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentSelectAllButtonActionPerformed(evt);
            }
        });

        asgnTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All Assignments", "With Handin Part", "With NonHandin Part", "With Lab" }));
        asgnTypeComboBox.setSelectedItem("With Handin Part");
        asgnTypeComboBox.setName("asgnTypeComboBox"); // NOI18N
        asgnTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asgnTypeComboBoxActionPerformed(evt);
            }
        });

        asgnSelectNoneButton.setText(resourceMap.getString("asgnSelectNoneButton.text")); // NOI18N
        asgnSelectNoneButton.setName("asgnSelectNoneButton"); // NOI18N
        asgnSelectNoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asgnSelectNoneButtonActionPerformed(evt);
            }
        });

        studentSelectNoneButton.setText(resourceMap.getString("studentSelectNoneButton.text")); // NOI18N
        studentSelectNoneButton.setName("studentSelectNoneButton"); // NOI18N
        studentSelectNoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentSelectNoneButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        studentList.setMaximumSize(new java.awt.Dimension(160, 95));
        studentList.setMinimumSize(new java.awt.Dimension(140, 95));
        studentList.setName("studentList"); // NOI18N
        studentList.setPreferredSize(null);
        studentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                studentListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(studentList);

        assignmentsLabel.setText(resourceMap.getString("assignmentsLabel.text")); // NOI18N
        assignmentsLabel.setName("assignmentsLabel"); // NOI18N

        assignmentsLabel1.setText(resourceMap.getString("assignmentsLabel1.text")); // NOI18N
        assignmentsLabel1.setName("assignmentsLabel1"); // NOI18N

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(leftPanelLayout.createSequentialGroup()
                            .addComponent(asgnSelectAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(asgnSelectNoneButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(asgnTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(assignmentsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(leftPanelLayout.createSequentialGroup()
                            .addComponent(studentSelectAllButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(studentSelectNoneButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(studentsLabel)
                        .addComponent(jScrollPane2, 0, 0, Short.MAX_VALUE)
                        .addComponent(studentFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
                    .addComponent(assignmentsLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(studentsLabel)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(assignmentsLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(assignmentsLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(asgnSelectAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(asgnSelectNoneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentSelectAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentSelectNoneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(asgnTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE))
                .addContainerGap())
        );

        rightPanel.setName("rightPanel"); // NOI18N

        generalCommandsLabel.setText(resourceMap.getString("generalCommandsLabel.text")); // NOI18N
        generalCommandsLabel.setName("generalCommandsLabel"); // NOI18N

        blacklistButton.setIcon(resourceMap.getIcon("blacklistButton.icon")); // NOI18N
        blacklistButton.setText(resourceMap.getString("blacklistButton.text")); // NOI18N
        blacklistButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        blacklistButton.setIconTextGap(5);
        blacklistButton.setName("blacklistButton"); // NOI18N
        blacklistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blacklistButtonActionPerformed(evt);
            }
        });

        configButton.setIcon(resourceMap.getIcon("configButton.icon")); // NOI18N
        configButton.setText(resourceMap.getString("configButton.text")); // NOI18N
        configButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        configButton.setIconTextGap(5);
        configButton.setName("configButton"); // NOI18N
        configButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configButtonActionPerformed(evt);
            }
        });

        exportDBButton.setIcon(resourceMap.getIcon("exportDBButton.icon")); // NOI18N
        exportDBButton.setText(resourceMap.getString("exportDBButton.text")); // NOI18N
        exportDBButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        exportDBButton.setIconTextGap(5);
        exportDBButton.setName("exportDBButton"); // NOI18N
        exportDBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportDBButtonActionPerformed(evt);
            }
        });

        resetDatabaseButton.setIcon(resourceMap.getIcon("resetDatabaseButton.icon")); // NOI18N
        resetDatabaseButton.setText(resourceMap.getString("resetDatabaseButton.text")); // NOI18N
        resetDatabaseButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        resetDatabaseButton.setIconTextGap(5);
        resetDatabaseButton.setName("resetDatabaseButton"); // NOI18N

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(resetDatabaseButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportDBButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(configButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(blacklistButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(generalCommandsLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generalCommandsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(blacklistButton)
                .addGap(18, 18, 18)
                .addComponent(configButton)
                .addGap(18, 18, 18)
                .addComponent(exportDBButton)
                .addGap(18, 18, 18)
                .addComponent(resetDatabaseButton)
                .addContainerGap(566, Short.MAX_VALUE))
        );

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        quitMenuItem.setText(resourceMap.getString("quitMenuItem.text")); // NOI18N
        quitMenuItem.setName("quitMenuItem"); // NOI18N
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenuItem);

        jMenuBar1.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N
        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(centerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rightPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(centerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(leftPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void asgnSelectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asgnSelectAllButtonActionPerformed
        assignmentList.setSelectionInterval(0, assignmentList.getModel().getSize() - 1);
        this.updateGUI();
    }//GEN-LAST:event_asgnSelectAllButtonActionPerformed

    private void studentSelectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentSelectAllButtonActionPerformed
        studentList.setSelectionInterval(0, studentList.getModel().getSize() - 1);
        this.updateGUI();
    }//GEN-LAST:event_studentSelectAllButtonActionPerformed

    private void studentSelectNoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentSelectNoneButtonActionPerformed
        studentList.clearSelection();
        this.updateGUI();
    }//GEN-LAST:event_studentSelectNoneButtonActionPerformed

    private void asgnSelectNoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asgnSelectNoneButtonActionPerformed
        assignmentList.clearSelection();
        this.updateGUI();
    }//GEN-LAST:event_asgnSelectNoneButtonActionPerformed

    private void asgnTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asgnTypeComboBoxActionPerformed
        if (asgnTypeComboBox.getSelectedItem().equals("All Assignments")) {
            assignmentList.setListData(Allocator.getCourseInfo().getAssignments().toArray());
        }
        else if (asgnTypeComboBox.getSelectedItem().equals("With Handin Part")) {
            assignmentList.setListData(Allocator.getCourseInfo().getHandinAssignments().toArray());
        }
        else if (asgnTypeComboBox.getSelectedItem().equals("With NonHandin Part")) {
            assignmentList.setListData(Allocator.getCourseInfo().getNonHandinAssignments().toArray());
        }
        else if (asgnTypeComboBox.getSelectedItem().equals("With Lab")) {
            assignmentList.setListData(Allocator.getCourseInfo().getLabAssignments().toArray());
        }
    }//GEN-LAST:event_asgnTypeComboBoxActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        Allocator.getGradingUtilities().removeUserGradingDirectory();
        System.exit(0);
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void previewRubricButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewRubricButtonActionPerformed
        if (this.getSelectedAssignment().hasHandinPart() && this.getSelectedAssignment().getHandinPart().hasRubric())
            Allocator.getRubricManager().viewTemplate(this.getSelectedAssignment().getHandinPart());
}//GEN-LAST:event_previewRubricButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        if (this.getSelectedAssignment().hasHandinPart() && this.getSelectedAssignment().getHandinPart().hasOpen())
            this.getSelectedAssignment().getHandinPart().openCode(this.getSelectedStudent());
}//GEN-LAST:event_openButtonActionPerformed

    private void printCodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printCodeButtonActionPerformed
        if (this.getSelectedAssignment().hasHandinPart() && this.getSelectedAssignment().getHandinPart().hasPrint())
            this.getSelectedAssignment().getHandinPart().printCode(this.getSelectedStudent(),
                                                                    Allocator.getGradingUtilities().getPrinter());
}//GEN-LAST:event_printCodeButtonActionPerformed

    private void demoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demoButtonActionPerformed
        if (this.getSelectedAssignment().hasHandinPart() && this.getSelectedAssignment().getHandinPart().hasDemo())
            this.getSelectedAssignment().getHandinPart().runDemo();
}//GEN-LAST:event_demoButtonActionPerformed

    private void viewRubricButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRubricButtonActionPerformed
        if (this.getSelectedAssignment().hasHandinPart() && this.getSelectedAssignment().getHandinPart().hasRubric())
            Allocator.getRubricManager().view(this.getSelectedAssignment().getHandinPart(), this.getSelectedStudent(), true);
}//GEN-LAST:event_viewRubricButtonActionPerformed

    private void testCodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testCodeButtonActionPerformed
        if (this.getSelectedAssignment().hasHandinPart() && this.getSelectedAssignment().getHandinPart().hasTester())
            this.getSelectedAssignment().getHandinPart().runTester(this.getSelectedStudent());
}//GEN-LAST:event_testCodeButtonActionPerformed

    private void runCodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runCodeButtonActionPerformed
        if (this.getSelectedAssignment().hasHandinPart() && this.getSelectedAssignment().getHandinPart().hasRun())
            this.getSelectedAssignment().getHandinPart().run(this.getSelectedStudent());
}//GEN-LAST:event_runCodeButtonActionPerformed

    private void importGradesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importGradesButtonActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_importGradesButtonActionPerformed

    private void sendGradesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendGradesButtonActionPerformed
        JPanel messagePanel = new JPanel();
        messagePanel.setLayout(new GridLayout(0,1));
        HashMap<Part,JCheckBox> boxMap = new HashMap<Part,JCheckBox>();
        for (Assignment a : this.getSelectedAssignments()) {
            for (Part p : a.getParts()) {
                JCheckBox partBox = new JCheckBox(a.getName() + ": " + p.getName());
                partBox.setSelected(true);
                boxMap.put(p, partBox);
                messagePanel.add(partBox);
            }
        }
        
        if (JOptionPane.showConfirmDialog(null, messagePanel, 
                                            "Select Assignment Parts", 
                                            JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION ) {
            Map<Assignment,Collection<Part>> map = new HashMap<Assignment,Collection<Part>>();
            for (Assignment a : this.getSelectedAssignments()) {
                Vector<Part> parts = new Vector<Part>();
                for (Part p : a.getParts()) {
                    if (boxMap.get(p).isSelected()) {
                        parts.add(p);
                    }
                }
                if (!parts.isEmpty()) {
                    map.put(a, parts);
                }
            }
            
            GradeReportView grv = new GradeReportView(map, this.getSelectedStudents());
            grv.setLocationRelativeTo(null);
            grv.setVisible(true);
        }
}//GEN-LAST:event_sendGradesButtonActionPerformed

    private void statisticsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statisticsButtonActionPerformed
        HistogramView hv = new HistogramView();
        hv.setLocationRelativeTo(null);
        hv.setVisible(true);
}//GEN-LAST:event_statisticsButtonActionPerformed

    private void reassignGradingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reassignGradingButtonActionPerformed
        new ReassignView(this.getSelectedAssignment());
}//GEN-LAST:event_reassignGradingButtonActionPerformed

    private void generateDistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateDistButtonActionPerformed
        new AssignmentdistView(this.getSelectedAssignment());
}//GEN-LAST:event_generateDistButtonActionPerformed

    private void gradingStandardsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradingStandardsButtonActionPerformed
        if(this.getSelectedAssignment().hasHandinPart() && this.getSelectedAssignment().getHandinPart().hasDeductionList()) {
            this.getSelectedAssignment().getHandinPart().viewDeductionList();
        }
    }//GEN-LAST:event_gradingStandardsButtonActionPerformed

    private void blacklistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blacklistButtonActionPerformed
        new ModifyBlacklistView();
    }//GEN-LAST:event_blacklistButtonActionPerformed

    private void configButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_configButtonActionPerformed

    private void assignmentListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_assignmentListValueChanged
        this.updateGUI();
        studentFilter.requestFocus();
    }//GEN-LAST:event_assignmentListValueChanged

    private void studentListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_studentListValueChanged
        this.updateGUI();
    }//GEN-LAST:event_studentListValueChanged

    private void printRubricButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printRubricButtonActionPerformed
        for (Assignment asgn : this.getSelectedAssignments()) {
            Allocator.getRubricManager().convertToGRD(asgn.getHandinPart(), this.getSelectedStudents());
            Allocator.getGradingUtilities().printGRDFiles(this.getSelectedStudents(), asgn.getName());
        }
    }//GEN-LAST:event_printRubricButtonActionPerformed

    private void submitGradeActionPerformed() {
        Part part = (Part) _comboMap.get(partsButtonGroup.getSelection().getActionCommand()).getSelectedItem();
        JTextField textField = _rbMap.get(partsButtonGroup.getSelection().getActionCommand());
        Double score = Double.parseDouble(textField.getText());
        Allocator.getDatabaseIO().enterGrade(getSelectedStudent(), part, score);
        studentFilter.requestFocus();
    }
    
    private void studentFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_studentFilterKeyReleased
        //term to filter against
        String filterTerm = studentFilter.getText();

        List<String> matchingLogins;
        //if no filter term, include all logins
        if(filterTerm.isEmpty()) {
            matchingLogins = Arrays.asList(_studentLogins);
        }
        //otherwise compared against beginning of each login
        else {
            matchingLogins = new Vector<String>();
            for(String login : _studentLogins){
                if(login.startsWith(filterTerm)){
                    matchingLogins.add(login);
                }
            }
        }

        //display matching logins
        studentList.setListData(matchingLogins.toArray());
        studentList.setSelectedIndex(0);

        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_TAB)) {
            studentFilter.setText(matchingLogins.get(0));
            _rbMap.get(partsButtonGroup.getSelection().getActionCommand()).requestFocus();
        }
    }//GEN-LAST:event_studentFilterKeyReleased

    private void exportDBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportDBButtonActionPerformed
        Allocator.getCSVExporter().export();
    }//GEN-LAST:event_exportDBButtonActionPerformed

    private void extensionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extensionButtonActionPerformed
        if(this.getSelectedStudent() != null && this.getSelectedAssignment() != null && this.getSelectedAssignment().hasHandinPart())
        {
            new ExtensionView(this.getSelectedAssignment().getHandinPart(), this.getSelectedStudent());
        }
    }//GEN-LAST:event_extensionButtonActionPerformed

   /**
     * Returns the currently selected assignment as a String.
     *
     * @return
     */
    private Vector<Assignment> getSelectedAssignments(){
        Vector<Assignment> result = new Vector<Assignment>();
        for (Object o : assignmentList.getSelectedValues()) {
            result.add((Assignment) o);
        }
        return result;
    }

    private Vector<String> getSelectedStudents(){
        Vector<String> result = new Vector<String>();
        for (Object o : studentList.getSelectedValues()) {
            result.add((String) o);
        }
        return result;
    }

    private Assignment getSelectedAssignment(){
        return (Assignment) assignmentList.getSelectedValue();
    }

    
    /**
     * Returns the currently selected student as a String.
     *
     * @return
     */
    private String getSelectedStudent(){
        return (String) studentList.getSelectedValue();
    }

    private boolean singleStudentSelected() {
        return (studentList.getSelectedValues().length == 1);
    }

    private boolean singleAssignmentSelected() {
        return (assignmentList.getSelectedValues().length == 1);
    }

    private boolean nothingSelected() {
        return ((studentList.getSelectedValues().length == 0) && (assignmentList.getSelectedValues().length == 0));
    }

    private void updateGUI() {
        CardLayout cl = (CardLayout) cardPanel.getLayout();
        if (this.nothingSelected()) {
            for (JButton button : _asgnButtons) {
                button.setEnabled(false);
            }

            for (JButton button : _studButtons) {
                button.setEnabled(false);
            }

            cl.show(cardPanel, "instructionCard");
            return;
        }

        //enable/disable appropriate buttons
        if (this.singleAssignmentSelected()) {              //case for single asgn selected
            //enable all assignment buttons
            for (JButton button : _asgnButtons) {
                button.setEnabled(true);
            }

            //update the current assignment label
            selectedAsgnLabel.setText("<html><b>Current Assignment: </b>" + this.getSelectedAssignment() + "</html>");

            //update student buttons
            if (this.singleStudentSelected()) {
                for (JButton button : _studButtons) {
                    button.setEnabled(true);
                }

                //update the current student label
                selectedStudsLabel.setText("<html><b>Current Student: </b>" + this.getSelectedStudent());

                //change card to single student and single assignment
                cl.show(cardPanel, "singlePanel");

                if (this.getSelectedAssignment().hasNonHandinParts()) {
                    nonHandinRb.setEnabled(true);
                    nonHandinPartsComboBox.setEnabled(true);
                    Vector<NonHandinPart> parts = new Vector<NonHandinPart>();
                    for (NonHandinPart part : this.getSelectedAssignment().getNonHandinParts()) {
                        parts.add(part);
                    }
                    nonHandinPartsComboBox.setModel(new DefaultComboBoxModel(parts));
                    
                    Part selected = (Part) nonHandinPartsComboBox.getSelectedItem();
                    nonHandinOutOf.setText(Double.toString(selected.getPoints()));
                    nonHandinEarned.setText(Double.toString(Allocator.getDatabaseIO().getStudentScore(this.getSelectedStudent(), selected)));
                    
                    if (partsButtonGroup.getSelection() == null) {
                        nonHandinRb.setSelected(true);
                    }
                }
                else {
                    nonHandinPartsComboBox.setModel(new DefaultComboBoxModel(new String[]{"none"}));
                    nonHandinPartsComboBox.setEnabled(false);
                    nonHandinRb.setEnabled(false);
                }
                
                if (this.getSelectedAssignment().hasLabParts()) {
                    labRb.setEnabled(true);
                    labComboBox.setEnabled(true);
                    Vector<LabPart> parts = new Vector<LabPart>();
                    for (LabPart part : this.getSelectedAssignment().getLabParts()) {
                        parts.add(part);
                    }
                    labComboBox.setModel(new DefaultComboBoxModel(parts));
                    Part selected = (Part) labComboBox.getSelectedItem();
                    labOutOf.setText(Double.toString(selected.getPoints()));
                    labEarned.setText(Double.toString(Allocator.getDatabaseIO().getStudentScore(this.getSelectedStudent(), selected)));
                    if (partsButtonGroup.getSelection() == null) {
                        labRb.setSelected(true);
                    }
                }
                else {
                    labComboBox.setModel(new DefaultComboBoxModel(new String[]{"none"}));
                    labComboBox.setEnabled(false);
                    labRb.setEnabled(false);
                }
                
                if (this.getSelectedAssignment().hasHandinPart()) {
                    handinRB.setEnabled(true);
                    if (partsButtonGroup.getSelection() == null) {
                        handinRB.setSelected(true);
                    }
                    Part selected = this.getSelectedAssignment().getHandinPart();
                    handinOutOf.setText(Double.toString(selected.getPoints()));
                    handinEarned.setText(Double.toString(Allocator.getDatabaseIO().getStudentScore(this.getSelectedStudent(), selected)));
                }
                else {
                    handinRB.setEnabled(false);
                    if (partsButtonGroup.getSelection() == null) {
                        overallRb.setSelected(true);
                    }
                }
                
                double totalPoints = this.getSelectedAssignment().getTotalPoints();
                overallTotalValue.setText(Double.toString(totalPoints));
                double totalScore = 0;
                for (Part p : this.getSelectedAssignment().getParts()) {
                    totalScore += Allocator.getDatabaseIO().getStudentScore(this.getSelectedStudent(), p);
                }
                overallEarnedValue.setText(Double.toString(totalScore));
                double percent = Math.round(totalScore / totalPoints) * 10;
                overallScoreValue.setText(Double.toString(percent));

                //set Tester button to be enabled or not depending on whether project has a tester
                if (this.getSelectedAssignment().hasHandinPart()) {
                    testCodeButton.setEnabled(this.getSelectedAssignment().getHandinPart().hasTester());
                }
                else {
                    testCodeButton.setEnabled(false);
                }

                //if there is no handin, disable handin-realted buttons
                if(!this.getSelectedAssignment().hasHandinPart() || !this.getSelectedAssignment().getHandinPart().hasHandin(this.getSelectedStudent())){
                    openButton.setEnabled(false);
                    runCodeButton.setEnabled(false);
                    testCodeButton.setEnabled(false);
                    printCodeButton.setEnabled(false);
                }

                //if there is no rubric, disable rubric related buttons
                String rubricPath = Allocator.getCourseInfo().getRubricDir() +
                                    this.getSelectedAssignment() + "/" + this.getSelectedStudent() + ".gml";
                if(!new File(rubricPath).exists()) {
                    viewRubricButton.setEnabled(false);
                    printRubricButton.setEnabled(false);
                }

            }
            else {
                for (JButton button : _studButtons) {
                    button.setEnabled(false);
                }
                for (JButton button : _multiStudButtons) {
                    button.setEnabled(true);
                }

                //update the current student label
                selectedStudsLabel.setText("<html><b>Current Student: </b>" + this.getSelectedStudents().size() + " students selected");

                //cannot enter grades for more than one student, so change card
                cl.show(cardPanel, "multiPanel");
            }
        }
        else {                                              //case for multiple assignments selected
            //update assignment buttons
            for (JButton button : _asgnButtons) {
                button.setEnabled(false);
            }
            for (JButton button : _multiAsgnButtons) {
                button.setEnabled(true);
            }

            //update the current assignment label
            selectedAsgnLabel.setText("<html><b>Current Assignment: </b>" + this.getSelectedAssignments().size() + " assignments selected </html>");

            //update student buttons
            for (JButton button : _studButtons) {
                button.setEnabled(false);
            }
            for (JButton button : _multiStudButtons) {
                button.setEnabled(true);
            }

            if (this.singleStudentSelected()) {
                toggleEnabledButton.setEnabled(true);
            }
            else {
                toggleEnabledButton.setEnabled(false);
            }

            //update the current student label
            selectedStudsLabel.setText("<html><b>Current Student: </b>" + this.getSelectedStudents().size() + " students selected");

            //cannot enter grades for more than one assignment, so change card
            cl.show(cardPanel, "multiPanel");
        }

        

    }

    private class GradeBoxKeyListener extends KeyAdapter {
        public void keyReleased(KeyEvent e) {
            if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                submitGradeButton.requestFocus();
            }
        }
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewBackend().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton asgnSelectAllButton;
    private javax.swing.JButton asgnSelectNoneButton;
    private javax.swing.JComboBox asgnTypeComboBox;
    private javax.swing.JList assignmentList;
    private javax.swing.JLabel assignmentsLabel;
    private javax.swing.JLabel assignmentsLabel1;
    private javax.swing.JButton blacklistButton;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JButton configButton;
    private javax.swing.JButton demoButton;
    private javax.swing.JButton exemptionButton;
    private javax.swing.JButton exportDBButton;
    private javax.swing.JButton extensionButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel generalCommandsLabel;
    private javax.swing.JButton generateDistButton;
    private javax.swing.JButton gradingStandardsButton;
    private javax.swing.JTextField handinEarned;
    private javax.swing.JTextField handinOutOf;
    private javax.swing.JRadioButton handinRB;
    private javax.swing.JLabel handinScoreLabel;
    private javax.swing.JLabel handinScoreValue;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton importGradesButton;
    private javax.swing.JLabel instructionsLabel;
    private javax.swing.JPanel instructionsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox labComboBox;
    private javax.swing.JTextField labEarned;
    private javax.swing.JTextField labOutOf;
    private javax.swing.JRadioButton labRb;
    private javax.swing.JLabel labScoreLabel;
    private javax.swing.JLabel labScoreValue;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel multiSelectedPanel;
    private javax.swing.JTextField nonHandinEarned;
    private javax.swing.JTextField nonHandinOutOf;
    private javax.swing.JComboBox nonHandinPartsComboBox;
    private javax.swing.JRadioButton nonHandinRb;
    private javax.swing.JLabel nonHandinScoreLabel;
    private javax.swing.JLabel nonHandinScoreValue;
    private javax.swing.JButton openButton;
    private javax.swing.JLabel overalTotalLabel;
    private javax.swing.JLabel overallEarnedLabel;
    private javax.swing.JLabel overallEarnedValue;
    private javax.swing.JRadioButton overallRb;
    private javax.swing.JLabel overallScoreLabel;
    private javax.swing.JLabel overallScoreValue;
    private javax.swing.JLabel overallTotalValue;
    private javax.swing.ButtonGroup partsButtonGroup;
    private javax.swing.JButton previewRubricButton;
    private javax.swing.JButton printCodeButton;
    private javax.swing.JButton printRubricButton;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JButton reassignGradingButton;
    private javax.swing.JButton resetDatabaseButton;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JButton runCodeButton;
    private javax.swing.JLabel selectedAsgnLabel;
    private javax.swing.JLabel selectedStudsLabel;
    private javax.swing.JButton sendGradesButton;
    private javax.swing.JPanel singleSelectedPanel;
    private javax.swing.JButton statisticsButton;
    private javax.swing.JTextField studentFilter;
    private javax.swing.JList studentList;
    private javax.swing.JButton studentSelectAllButton;
    private javax.swing.JButton studentSelectNoneButton;
    private javax.swing.JLabel studentsLabel;
    private javax.swing.JButton submitGradeButton;
    private javax.swing.JButton testCodeButton;
    private javax.swing.JButton toggleEnabledButton;
    private javax.swing.JButton viewRubricButton;
    private javax.swing.JLabel welcomeLabel;
    private javax.swing.JLabel writtenEarnedLabel;
    private javax.swing.JLabel writtenScoreValue1;
    private javax.swing.JLabel writtenTotalLabel;
    // End of variables declaration//GEN-END:variables

}
