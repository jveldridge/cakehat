/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AssignmentDistributorGUI.java
 *
 * Created on Sep 7, 2009, 12:53:58 PM
 */
package backend.assignmentdist;

import config.Assignment;
import config.TA;
import backend.OldDatabaseOps;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utils.Allocator;
import utils.ErrorView;

/**
 *
 * @author Paul
 */
public class AssignmentdistView extends javax.swing.JFrame {

    /** Creates new form AssignmentDistributorGUI */
    public AssignmentdistView(Assignment asgn) {
        initComponents();
        try {
            this.setIconImage(ImageIO.read(getClass().getResource("/gradesystem/resources/icons/32x32/accessories-text-editor.png")));
        } catch (Exception e) {
        }

        for (Assignment s : Allocator.getCourseInfo().getHandinAssignments()) {
            assignmentNameComboBox.insertItemAt(s, assignmentNameComboBox.getItemCount());
        }

        //create dist for assignment passed in as parameter
        if (asgn != null) {
            assignmentNameComboBox.setSelectedItem(asgn);
            this.setTitle(assignmentNameComboBox.getSelectedItem() + " - cs015 Assignment Distributor");
        }

        fillTable();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    private void fillTable() {

        try {
            mainTable.removeAll();
            mainTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{}, new String[]{}));
            mainTable.removeAll();
            DefaultTableModel m = (DefaultTableModel) mainTable.getModel();
            m.addColumn("TA Login");
            m.addColumn("Max Number to Grade");
            for (TA grader : Allocator.getCourseInfo().getDefaultGraders()) {
                m.addRow(new String[] {grader.getLogin(), "0"});
            }

        } catch (Exception e) {
            new ErrorView(e);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        assignmentNameComboBox = new javax.swing.JComboBox();
        generateDistButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTable = new backend.assignmentdist.AssignmentdistTable();
        setupGradingButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        mainMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMcenu2 = new javax.swing.JMenu();

        assignmentNameComboBox.setFocusable(false);
        assignmentNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignmentNameComboBoxActionPerformed(evt);
            }
        });

        generateDistButton.setText("1. Distribute Students");
        generateDistButton.setFocusable(false);
        generateDistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateDistButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("A negative value indicates no max number to grade.");

        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(mainTable);

        setupGradingButton.setText("2. Set Up Grading");
        setupGradingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupGradingButtonActionPerformed(evt);
            }
        });

        jButton1.setText("ReAssign Grading");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        mainMenuBar.add(jMenu1);

        jMcenu2.setText("Edit");
        mainMenuBar.add(jMcenu2);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(assignmentNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 263, Short.MAX_VALUE)
                        .addComponent(generateDistButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setupGradingButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignmentNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateDistButton)
                    .addComponent(setupGradingButton)
                    .addComponent(jButton1))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void assignmentNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignmentNameComboBoxActionPerformed
        this.setTitle(assignmentNameComboBox.getSelectedItem() + " - cs015 Assignment Distributor");
        fillTable();
    }//GEN-LAST:event_assignmentNameComboBoxActionPerformed

    private void generateDistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateDistButtonActionPerformed
        String asgn = (String) assignmentNameComboBox.getSelectedItem();
        Assignment asgnObject = (Assignment) assignmentNameComboBox.getSelectedItem();

        //check to make sure that there is not a dist already
        if (!OldDatabaseOps.isDistEmpty(asgn)) {
            int n = JOptionPane.showConfirmDialog(new JFrame(), "A distribution already exists for " + asgn + ".\nAre you sure you want to overwrite the existing distribution?", "Confirm Overwrite", JOptionPane.YES_NO_OPTION);
            if (n == JOptionPane.NO_OPTION) {
                return;
            }
        }

        //get studnet logins, shuffle logins, add to deque
        ArrayList<String> studLogins = new ArrayList<String>(asgnObject.getHandinPart().getHandinLogins());
        Collections.shuffle(studLogins);
        ArrayDeque<String> students = new ArrayDeque<String>(studLogins);

        //get all grader logins
        ArrayList<String> taLogins = new ArrayList<String>();
        for (TA ta : Allocator.getCourseInfo().getDefaultGraders()) {
            taLogins.add(ta.getLogin());
        }
        String[] taNames = taLogins.toArray(new String[0]);

        //build distrobution hashmap
        HashMap<String, Collection<String>> distribution = new HashMap<String, Collection<String>>();
        for (String grader : taLogins) {
            distribution.put(grader, new ArrayList<String>());
        }

        //get the current distribution modifiers from table
        DefaultTableModel modelOfTable = (DefaultTableModel) mainTable.getModel();

        //total number of students used in calculating the average
        int calculatedTotalStudents = students.size();

        //update total number of students based modifiers from table (only used for calc of avg)
        for (int rowCount = 0; rowCount < modelOfTable.getRowCount(); rowCount++) {
            int diffFromAvg = (Integer) Integer.parseInt(modelOfTable.getValueAt(rowCount, 1).toString());
            calculatedTotalStudents -= diffFromAvg;
        }

        //average number of students for each ta
        int avg = (int) Math.floor((double) calculatedTotalStudents / (double) taLogins.size());

        //build hashmap of how many students each TA must grade
        HashMap<String, Integer> numStudsToGrade = new HashMap<String, Integer>();
        for (int rowCount = 0; rowCount < modelOfTable.getRowCount(); rowCount++) {
            String taLogin = (String) modelOfTable.getValueAt(rowCount, 0);
            int numToGrade = (Integer) Integer.parseInt(modelOfTable.getValueAt(rowCount, 1).toString()) + avg;

            numStudsToGrade.put(taLogin, numToGrade);
        }

        //make a list of all blacklisted students and hashmap of all ta blacklists
        HashSet<String> blacklistedStudents = new HashSet<String>();
        HashMap<String, Collection<String>> taBlacklists = new HashMap<String, Collection<String>>();

        for (String ta : taLogins) {
            Collection<String> tasBlackList = Allocator.getDatabaseIO().getTABlacklist(ta);
            blacklistedStudents.addAll(tasBlackList);
            taBlacklists.put(ta, tasBlackList);
        }

        //add all blacklisted students to a TA first
        for (String blStudent : blacklistedStudents) {
            Collections.shuffle(taLogins);
            boolean distributed = false;
            for (String ta : taLogins) {
                //if ta's blacklist does not contain student and ta's dist is not full
                if (!taBlacklists.get(ta).contains(blStudent)
                        && distribution.get(ta).size() < numStudsToGrade.get(ta)) {

                    distribution.get(ta).add(blStudent); //add student to ta's dist
                    students.remove(blStudent); //remove student from those that need dist
                    numStudsToGrade.put(ta, numStudsToGrade.get(ta) - 1); //reduce num ta needs
                    distributed = true;
                    break;
                }
            }
            if (!distributed) {
                JOptionPane.showMessageDialog(this, "There was an error"
                        + "distributing blacklisted"
                        + "students. Please try running"
                        + "the distribution again.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        //fill TAs to limit
        for (String ta : taLogins) {
            Collection<String> students2TA = distribution.get(ta);
            for (int i = 0; i < numStudsToGrade.get(ta); i++) {
                students2TA.add(students.removeFirst());
            }
            distribution.put(ta, students2TA);
        }

        //distribute remaining students (< n of them) to random TAs
        Collections.shuffle(taLogins);
        for (String ta : taLogins) {
            if (!students.isEmpty()) {
                distribution.get(ta).add(students.removeFirst());
            } else {
                break;
            }
        }

        Allocator.getDatabaseIO().setAsgnDist(asgnObject.getHandinPart(), distribution);
    }//GEN-LAST:event_generateDistButtonActionPerformed

    private void setupGradingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupGradingButtonActionPerformed
        String asgn = (String) assignmentNameComboBox.getSelectedItem();

        //create rubric directory if it does not exist
        String directoryPath = Allocator.getCourseInfo().getRubricDir() + asgn + "/";
        Allocator.getGeneralUtilities().makeDirectory(directoryPath);

        ImageIcon icon = new javax.swing.ImageIcon("/gradesystem/resources/icons/32x32/accessories-text-editor.png"); // NOI18N
        String input = (String) JOptionPane.showInputDialog(new JFrame(), "Enter minutes of leniency:", "Set Grace Period", JOptionPane.PLAIN_MESSAGE, icon, null, "");
        int minsLeniency = Allocator.getCourseInfo().getMinutesOfLeniency();
        if ((input != null) && (input.length() != 0)) {
            minsLeniency = Integer.parseInt(input);
        }


        throw new UnsupportedOperationException("Not supported due to new rubric code changes.");
        /*
        for (String taLogin : ConfigurationManager.getGraderLogins()) {
            String[] studsToGrade = OldDatabaseOps.getStudentsToGrade(taLogin, (String) assignmentNameComboBox.getSelectedItem());
            for (String stud : studsToGrade) {
                try {
                    RubricManager.assignXMLToGrader(Allocator.getProject((String)assignmentNameComboBox.getSelectedItem()), stud, taLogin, OldDatabaseOps.getStudentDQScore((String)assignmentNameComboBox.getSelectedItem(), stud), minsLeniency);
                }
                catch(RubricException e) {
                    new ErrorView(e);
                }
            }
        }
       */
}//GEN-LAST:event_setupGradingButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //new ReassignView((String) assignmentNameComboBox.getSelectedItem());
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new AssignmentdistView(null).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox assignmentNameComboBox;
    private javax.swing.JButton generateDistButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMcenu2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar mainMenuBar;
    private backend.assignmentdist.AssignmentdistTable mainTable;
    private javax.swing.JButton setupGradingButton;
    // End of variables declaration//GEN-END:variables
}
