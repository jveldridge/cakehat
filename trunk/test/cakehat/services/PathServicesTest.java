package cakehat.services;

import cakehat.assignment.Part;
import cakehat.Allocator;
import cakehat.Allocator.SingletonAllocation;
import cakehat.assignment.Assignment;
import cakehat.newdatabase.Group;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import org.junit.Before;
import org.junit.Test;
import support.utils.CalendarUtilities;
import support.utils.UserUtilities;

import static org.junit.Assert.*;
import static org.easymock.EasyMock.*;

/**
 * Tests the paths generated by {@link PathServicesImpl}.
 *
 * @author jak2
 */
public class PathServicesTest
{
    private static final String COURSE = "cs001";
    private static final int YEAR = 1988;

    private static final int ASSIGNMENT_NUMBER = 1;
    private static final String ASSIGNMENT_NAME = "the asgn";
    private static final String PART_NAME = "the dist part";
    private static final String TA_LOGIN = "jak2";
    private static final String GROUP_NAME = "the group";

    private Group _group;
    private Assignment _assignment;
    private Part _part;
    private PathServices _service;

    @Before
    public void setup() throws ServicesException, IOException, SQLException
    {
        //Mock group
        _group = createMock(Group.class);
        expect(_group.getName()).andReturn(GROUP_NAME).anyTimes();
        replay(_group);

        //Create mocked assignment, handin, and part objects
        _assignment = createMock(Assignment.class);
        expect(_assignment.getName()).andReturn(ASSIGNMENT_NAME).anyTimes();
        expect(_assignment.getId()).andReturn(ASSIGNMENT_NUMBER).anyTimes();

        _part = createMock(Part.class);
        expect(_part.getName()).andReturn(PART_NAME).anyTimes();
        expect(_part.getAssignment()).andReturn(_assignment).anyTimes();

        replay(_assignment);
        replay(_part);
        
        //Mock out course information
        final CourseInfo courseInfo = createMock(CourseInfo.class);
        expect(courseInfo.getCourse()).andReturn(COURSE).anyTimes();
        replay(courseInfo);
        SingletonAllocation<CourseInfo> courseInfoAlloc =
            new SingletonAllocation<CourseInfo>()
            {
                public CourseInfo allocate() { return courseInfo; };
            };

        //Mock out calendar info
        final CalendarUtilities calendarUtil = createMock(CalendarUtilities.class);
        expect(calendarUtil.getCurrentYear()).andReturn(YEAR).anyTimes();
        replay(calendarUtil);
        SingletonAllocation<CalendarUtilities> calendarUtilAlloc =
            new SingletonAllocation<CalendarUtilities>()
            {
                public CalendarUtilities allocate() { return calendarUtil; };
            };

        //Mock out user utilities
        final UserUtilities userUtil = createMock(UserUtilities.class);
        expect(userUtil.getUserLogin()).andReturn(TA_LOGIN).anyTimes();
        replay(userUtil);
        SingletonAllocation<UserUtilities> userUtilAlloc =
            new SingletonAllocation<UserUtilities>()
            {
                public UserUtilities allocate() { return userUtil; };
            };
        
        
        new Allocator.Customizer()
                .setCourseInfo(courseInfoAlloc)
                .setCalendarUtils(calendarUtilAlloc)
                .setUserUtils(userUtilAlloc)
                .customize();

        _service = Allocator.getPathServices();
    }

    @Test
    public void testGetCourseDir()
    {
        File expected = new File("/course/" + COURSE);

        assertEquals(expected, _service.getCourseDir());
    }

    @Test
    public void testGetCakehatDir()
    {
        File expected = new File("/course/" + COURSE + "/.cakehat");

        assertEquals(expected, _service.getCakehatDir());
    }

    @Test
    public void testGroupGMLFile()
    {
        File expected = new File("/course/" + COURSE + "/.cakehat/" + YEAR +
                "/rubrics/" + ASSIGNMENT_NAME + "/" + PART_NAME + "/" +
                GROUP_NAME + ".gml");

        assertEquals(expected, _service.getGroupGMLFile(_part, _group));
    }

    @Test
    public void testGetDatabaseFile()
    {
        File expected = new File("/course/" + COURSE + "/.cakehat/" + YEAR +
                "/database/database.db");

        assertEquals(expected, _service.getDatabaseFile());
    }

    @Test
    public void testGetDatabaseBackupDir()
    {
        File expected = new File("/course/" + COURSE + "/.cakehat/" + YEAR +
                "/database/backups");

        assertEquals(expected, _service.getDatabaseBackupDir());
    }

    @Test
    public void testGetUserWorkspaceDir()
    {
        File expected = new File("/course/" + COURSE + "/.cakehat/workspaces/" +
                TA_LOGIN + "-test");

        assertEquals(expected, _service.getUserWorkspaceDir());
    }

    @Test
    public void testGetUserPartDir()
    {
        File expected = new File("/course/" + COURSE + "/.cakehat/workspaces/" +
                TA_LOGIN + "-test/" + ASSIGNMENT_NAME + "/" + PART_NAME);

        assertEquals(expected, _service.getUserPartDir(_part));
    }

    @Test
    public void testGetUnarchiveHandinDir()
    {
        File expected = new File("/course/" + COURSE + "/.cakehat/workspaces/" +
                TA_LOGIN + "-test/" + ASSIGNMENT_NAME + "/" + PART_NAME + "/" +
                GROUP_NAME);

        assertEquals(expected, _service.getUnarchiveHandinDir(_part, _group));
    }
}